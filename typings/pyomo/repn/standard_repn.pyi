"""
This type stub file was generated by pyright.
"""

logger = ...
def isclose_const(a, b, rel_tol=..., abs_tol=...): # -> Literal[False]:
    ...

class StandardRepn:
    """
    This class defines a standard/common representation for Pyomo expressions
    that provides an efficient interface for writing all models.

    TODO: define what "efficient" means to us.
    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __getstate__(self): # -> tuple[int | Any, tuple[Any, ...] | Any, tuple[Any, ...] | Any, tuple[Any, ...] | Any, tuple[Any, ...] | Any, Any | None, tuple[Any, ...] | Any]:
        """
        This method is required because this class uses slots.
        """
        ...
    
    def __setstate__(self, state): # -> None:
        """
        This method is required because this class uses slots.
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def is_fixed(self): # -> bool:
        ...
    
    def polynomial_degree(self): # -> Literal[2, 1, 0] | None:
        ...
    
    def is_constant(self): # -> bool:
        ...
    
    def is_linear(self): # -> bool:
        ...
    
    def is_quadratic(self): # -> bool:
        ...
    
    def is_nonlinear(self): # -> bool:
        ...
    
    def to_expression(self, sort=...): # -> int:
        ...
    


def generate_standard_repn(expr, idMap=..., compute_values=..., verbose=..., quadratic=..., repn=...):
    ...

class ResultsWithQuadratics:
    __slot__ = ...
    def __init__(self, constant=..., nonl=..., linear=..., quadratic=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class ResultsWithoutQuadratics:
    __slot__ = ...
    def __init__(self, constant=..., nonl=..., linear=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


Results = ...
_repn_collectors = ...
def preprocess_block_objectives(block, idMap=...): # -> None:
    ...

def preprocess_block_constraints(block, idMap=...): # -> None:
    ...

def preprocess_constraint(block, constraint, idMap=..., block_repn=...): # -> None:
    ...

def preprocess_constraint_data(block, constraint_data, idMap=..., block_repn=...): # -> None:
    ...

