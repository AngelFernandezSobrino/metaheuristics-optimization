"""
This type stub file was generated by pyright.
"""

from pyomo.core.base.component import ModelComponentFactory
from pyomo.core.base.constraint import ConstraintData, IndexedConstraint
from collections.abc import Mapping

logger = ...
def compile_block_linear_constraints(parent_block, constraint_name, skip_trivial_constraints=..., single_precision_storage=..., verbose=..., descend_into=...):
    ...

class _LinearConstraintData(ConstraintData):
    """
    This class defines the data for a single linear constraint
        in canonical form.

    Constructor arguments:
        component       The Constraint object that owns this data.

    Public class attributes:
        active          A boolean that is true if this constraint is
                            active in the model.
        body            The Pyomo expression for this constraint
        lower           The Pyomo expression for the lower bound
        upper           The Pyomo expression for the upper bound
        equality        A boolean that indicates whether this is an
                            equality constraint
        strict_lower    A boolean that indicates whether this
                            constraint uses a strict lower bound
        strict_upper    A boolean that indicates whether this
                            constraint uses a strict upper bound
        variables       A tuple of variables comprising the body
                            of this constraint
        coefficients    A tuple of coefficients matching the order
                            of variables that comprise the body of
                            this constraint
        constant        A number representing the aggregation of any
                            constant/fixed items found in the body of
                            this constraint

    Private class attributes:
        _component      The objective component.
        _active         A boolean that indicates whether this data is active
    """
    __slots__ = ...
    def __init__(self, index, component=...) -> None:
        ...
    


class _LinearMatrixConstraintData(_LinearConstraintData):
    """
    This class defines the data for a single linear constraint
        derived from a canonical form Ax=b constraint.

    Constructor arguments:
        component       The Constraint object that owns this data.

    Public class attributes:
        active          A boolean that is true if this constraint is
                            active in the model.
        body            The Pyomo expression for this constraint
        lower           The Pyomo expression for the lower bound
        upper           The Pyomo expression for the upper bound
        equality        A boolean that indicates whether this is an
                            equality constraint
        strict_lower    A boolean that indicates whether this
                            constraint uses a strict lower bound
        strict_upper    A boolean that indicates whether this
                            constraint uses a strict upper bound
        variables       A tuple of variables comprising the body
                            of this constraint
        coefficients    A tuple of coefficients matching the order
                            of variables that comprise the body of
                            this constraint
        constant        A number representing the aggregate of any
                            constants found in the body of this
                            constraint

    Private class attributes:
        _component      The objective component.
        _active         A boolean that indicates whether this data is active
    """
    __slots__ = ...
    def __init__(self, index, component=...) -> None:
        ...
    
    def __getstate__(self): # -> list[Any]:
        """
        This method must be defined because this class uses slots.
        """
        ...
    
    def __call__(self, exception=...): # -> int | None:
        """
        Compute the value of the body of this constraint.
        """
        ...
    
    def has_lb(self): # -> Literal[False]:
        """Returns :const:`False` when the lower bound is
        :const:`None` or negative infinity"""
        ...
    
    def has_ub(self): # -> Literal[False]:
        """Returns :const:`False` when the upper bound is
        :const:`None` or positive infinity"""
        ...
    
    def lslack(self):
        """
        Returns the value of L-f(x) for constraints of the form:
            L <= f(x) (<= U)
            (U >=) f(x) >= L
        """
        ...
    
    def uslack(self): # -> None:
        """
        Returns the value of U-f(x) for constraints of the form:
            (L <=) f(x) <= U
            U >= f(x) (>= L)
        """
        ...
    
    def index(self): # -> Any:
        ...
    
    @property
    def variables(self): # -> tuple[()] | tuple[Any, ...]:
        """A tuple of variables comprising the constraint body."""
        ...
    
    @property
    def coefficients(self): # -> tuple[()] | tuple[Any, ...]:
        """A tuple of coefficients associated with the variables."""
        ...
    
    linear = ...
    @property
    def constant(self): # -> int:
        """The constant value associated with the constraint body."""
        ...
    
    def to_bounded_expression(self, evaluate_bounds=...): # -> tuple[Any | None, Any | NumericConstant | int, Any | None]:
        """Access this constraint as a single expression."""
        ...
    
    @property
    def body(self): # -> NumericConstant | int:
        """Access the body of a constraint expression."""
        ...
    
    @property
    def lower(self): # -> None:
        """Access the lower bound of a constraint expression."""
        ...
    
    @property
    def upper(self): # -> None:
        """Access the upper bound of a constraint expression."""
        ...
    
    @property
    def lb(self): # -> None:
        """Access the lower bound of a constraint expression."""
        ...
    
    @property
    def ub(self): # -> None:
        """Access the upper bound of a constraint expression."""
        ...
    
    @property
    def equality(self):
        """A boolean indicating whether this is an equality constraint."""
        ...
    
    @property
    def strict_lower(self):
        """A boolean indicating whether this constraint has a strict lower bound."""
        ...
    
    @property
    def strict_upper(self):
        """A boolean indicating whether this constraint has a strict upper bound."""
        ...
    
    def set_value(self, expr):
        """Set the expression on this constraint."""
        ...
    


@ModelComponentFactory.register("A set of constraint expressions in Ax=b form.")
class MatrixConstraint(Mapping, IndexedConstraint):
    StrictUpperBound = ...
    UpperBound = ...
    Equality = ...
    LowerBound = ...
    StrictLowerBound = ...
    NoBound = ...
    def __init__(self, nrows, ncols, nnz, prows, jcols, vals, ranges, range_types, varmap) -> None:
        ...
    
    def construct(self, data=...): # -> None:
        """
        Construct the expression(s) for this constraint.
        """
        ...
    
    def __getitem__(self, key):
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[int, None, None]:
        ...
    
    def add(self, index, expr):
        ...
    
    def __delitem__(self):
        ...
    
    def keys(self, sort=...): # -> KeysView[Any]:
        ...
    
    def values(self, sort=...): # -> ValuesView[Any]:
        ...
    
    def items(self, sort=...): # -> ItemsView[Any, Any]:
        ...
    


