"""
This type stub file was generated by pyright.
"""

class _robust_sort_keyfcn:
    """Class for robustly generating sortable keys for arbitrary data.

    Generates keys (for use with Python `sorted()` that are
    (str(type_name), val), where val is the actual value (if the type
    is comparable), otherwise the string representation of the value.
    If str() also fails, we fall back on id().

    This allows sorting lists with mixed types in Python3

    We implement this as a callable object so that we can store the
    user's original key function, if provided

    """
    _typemap = ...
    def __init__(self, key=...) -> None:
        ...
    
    def __call__(self, val): # -> tuple[str, Any] | tuple[str, tuple[Any, ...]] | tuple[str, str] | tuple[str, int]:
        """Generate a tuple ( str(type_name), val ) for sorting the value.

        `key=` expects a function.  We are generating a functor so we
        have a convenient place to store the user-provided key and the
        (singleton) _typemap, which maps types to the type-specific
        functions for converting a value to the second argument of the
        sort key.

        """
        ...
    


def sorted_robust(iterable, key=..., reverse=...): # -> list[Any]:
    """Utility to sort an arbitrary iterable.

    This returns the sorted(arg) in a consistent order by first trying
    the standard sort() function, and if that fails (for example with
    mixed-type Sets in Python3), use the _robust_sort_keyfcn utility
    (above) to generate sortable keys.

    Parameters
    ----------
    iterable: iterable
        the source of items to sort
    key: function
        a function of one argument that is used to extract the
        comparison key from each element in `iterable`
    reverse: bool
        if True, the iterable is sorted as if each comparison was reversed.

    Returns
    -------
    list
    """
    ...

