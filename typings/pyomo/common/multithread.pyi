"""
This type stub file was generated by pyright.
"""

class MultiThreadWrapper:
    """A python object proxy that wraps different instances for each thread.

    This is useful for handling thread-safe access to singleton objects without
    having to refactor the code that depends on them.

    Note that instances of the wrapped object are reused if two threads share the same
    identifier, because identifiers could be reused and are unique only for any given moment.
    See [get_ident()](https://docs.python.org/3/library/threading.html#threading.get_ident) for more information.
    """
    __slots__ = ...
    def __init__(self, base) -> None:
        ...
    
    def __getattr__(self, attr): # -> Any:
        ...
    
    def __setattr__(self, attr, value): # -> None:
        ...
    
    def __delattr__(self, attr): # -> None:
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, exc_type, exc_value, traceback):
        ...
    
    def __dir__(self): # -> list[str]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __new__(cls, wrapped): # -> Self:
        ...
    


class MultiThreadWrapperWithMain(MultiThreadWrapper):
    """An extension of `MultiThreadWrapper` that exposes the wrapped instance
    corresponding to the [main_thread()](https://docs.python.org/3/library/threading.html#threading.main_thread)
    under the `.main_thread` field.

    This is useful for a falling back to a main instance when needed, but results
    in race conditions if used improperly.
    """
    def __init__(self, base) -> None:
        ...
    
    def __getattr__(self, attr): # -> Any:
        ...
    
    def __setattr__(self, attr, value): # -> None:
        ...
    
    def __dir__(self): # -> list[str]:
        ...
    


