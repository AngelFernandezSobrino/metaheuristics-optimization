"""
This type stub file was generated by pyright.
"""

class FlagType(type):
    """Metaclass to help generate "Flag Types".

    This is useful for defining "flag types" that are default arguments
    in functions so that the Sphinx-generated documentation is
    "cleaner".  These types are not constructable (attempts to construct
    the class return the class) and simplify the repr(type) and
    str(type).

    This metaclass redefines the ``str()`` and ``repr()`` of resulting
    classes.  The str() of the class returns only the class' ``__name__``,
    whereas the repr() returns either the qualified class name
    (``__qualname__``) if Sphinx has been imported, or else the
    fully-qualified class name (``__module__ + '.' + __qualname__``).

    """
    def __new__(mcs, name, bases, dct): # -> Self:
        ...
    
    def __repr__(cls): # -> str:
        ...
    
    def __str__(cls) -> str:
        ...
    


class NOTSET(metaclass=FlagType):
    """
    Class to be used to indicate that an optional argument
    was not specified, if `None` may be ambiguous. Usage:

    Examples
    --------
    >>> def foo(value=NOTSET):
    ...     if value is NOTSET:
    ...         pass  # no argument was provided to `value`

    """
    ...


def in_testing_environment(state=...): # -> bool:
    """Return True if we are currently running in a "testing" environment

    This currently includes if ``nose``, ``nose2``, or ``pytest`` are
    running (imported).

    Parameters
    ----------
    state : bool or None
        If provided, sets the current state of the testing environment
        (Setting to None reverts to the normal interrogation of
        ``sys.modules``)

    Returns
    -------
    bool

    """
    ...

def building_documentation(state=...): # -> bool:
    """True if we are building the Sphinx documentation

    We detect if we are building the documentation by looking if the
    ``sphinx`` or ``Sphinx`` modules are imported.

    Parameters
    ----------
    state : bool or None
        If provided, sets the current state of the building environment
        flag (Setting to None reverts to the normal interrogation of
        ``sys.modules``)

    Returns
    -------
    bool

    """
    ...

def serializing(): # -> bool:
    """True if it looks like we are serializing objects

    This looks through the call stack and returns True if it finds a
    `dump` function anywhere in the call stack.  While not foolproof,
    this should reliably catch most serializers, including ``pickle``
    and `yaml``.

    """
    ...

