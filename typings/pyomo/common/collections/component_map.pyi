"""
This type stub file was generated by pyright.
"""

import collections
from pyomo.common.autoslots import AutoSlots

class _Hasher(collections.defaultdict):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def hashable(self, obj, hashable=...): # -> bool | None:
        ...
    


_hasher = ...
class ComponentMap(AutoSlots.Mixin, collections.abc.MutableMapping):
    """
    This class is a replacement for dict that allows Pyomo
    modeling components to be used as entry keys. The
    underlying mapping is based on the Python id() of the
    object, which gets around the problem of hashing
    subclasses of NumericValue. This class is meant for
    creating mappings from Pyomo components to values. The
    use of non-Pyomo components as entry keys should be
    avoided.

    A reference to the object is kept around as long as it
    has a corresponding entry in the container, so there is
    no need to worry about id() clashes.

    We also override __setstate__ so that we can rebuild the
    container based on possibly updated object ids after
    a deepcopy or pickle.

    *** An instance of this class should never be
    deepcopied/pickled unless it is done so along with the
    components for which it contains map entries (e.g., as
    part of a block). ***
    """
    __slots__ = ...
    __autoslot_mappers__ = ...
    hasher = ...
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def __str__(self) -> str:
        """String representation of the mapping."""
        ...
    
    def __getitem__(self, obj):
        ...
    
    def __setitem__(self, obj, val): # -> None:
        ...
    
    def __delitem__(self, obj): # -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def update(self, *args, **kwargs): # -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __contains__(self, obj): # -> bool:
        ...
    
    def clear(self): # -> None:
        'D.clear() -> None.  Remove all items from D.'
        ...
    
    def get(self, key, default=...): # -> None:
        'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'
        ...
    
    def setdefault(self, key, default=...): # -> None:
        'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'
        ...
    


class DefaultComponentMap(ComponentMap):
    """A :py:class:`defaultdict` admitting Pyomo Components as keys

    This class is a replacement for defaultdict that allows Pyomo
    modeling components to be used as entry keys. The base
    implementation builds on :py:class:`ComponentMap`.

    """
    __slots__ = ...
    def __init__(self, default_factory=..., *args, **kwargs) -> None:
        ...
    
    def __missing__(self, key):
        ...
    
    def __getitem__(self, obj):
        ...
    


