"""
This type stub file was generated by pyright.
"""

from types import ModuleType
from typing import List
from pyomo.common.deprecation import deprecated

SUPPRESS_DEPENDENCY_WARNINGS = ...
class ModuleUnavailable:
    """Mock object that raises :py:class:`.DeferredImportError` upon attribute access

    This object is returned by :py:func:`attempt_import()` in lieu of
    the module in the case that the module import fails.  Any attempts
    to access attributes on this object will raise a :py:class:`.DeferredImportError`
    exception.

    Parameters
    ----------
    name: str
        The module name that was being imported

    message: str
        The string message to return in the raised exception

    version_error: str
        A string to add to the message if the module failed to import because
        it did not match the required version

    import_error: str
        A string to add to the message documenting the Exception
        raised when the module failed to import.

    package: str
        The module name that originally attempted the import
    """
    _getattr_raises_attributeerror = ...
    def __init__(self, name, message, version_error, import_error, package) -> None:
        ...
    
    def __getattr__(self, attr):
        ...
    
    def __getstate__(self): # -> tuple[Any, tuple[Any, Any, Any, Any] | Any]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def mro(self): # -> list[Any]:
        ...
    
    def log_import_warning(self, logger=..., msg=...): # -> None:
        """Log the import error message to the specified logger

        This will log the the import error message to the specified
        logger.  If ``msg=`` is specified, it will override the default
        message passed to this instance of
        :py:class:`ModuleUnavailable`.

        """
        ...
    
    @deprecated("use :py:class:`log_import_warning()`", version='6.0')
    def generate_import_warning(self, logger=...): # -> None:
        ...
    


class DeferredImportModule:
    """Mock module object to support the deferred import of a module.

    This object is returned by :py:func:`attempt_import()` in lieu of
    the module when :py:func:`attempt_import()` is called with
    ``defer_import=True``.  Any attempts to access attributes on this
    object will trigger the actual module import and return either the
    appropriate module attribute or else if the module import fails,
    raise a :py:class:`.DeferredImportError` exception.

    """
    def __init__(self, indicator, deferred_submodules, submodule_name) -> None:
        ...
    
    def __getattr__(self, attr): # -> Any:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def mro(self): # -> list[Any]:
        ...
    


def UnavailableClass(unavailable_module): # -> type[UnavailableBase]:
    """Function to generate an "unavailable" base class

    This function returns a custom class that wraps the
    :py:class:`ModuleUnavailable` instance returned by
    :py:func:`attempt_import` when the target module is not available.
    Any attempt to instantiate this class (or a class derived from it)
    or access a class attribute will raise the
    :py:class:`.DeferredImportError` from the wrapped
    :py:class:`ModuleUnavailable` object.

    Parameters
    ----------
    unavailable_module: ModuleUnavailable
        The :py:class:`ModuleUnavailable` instance (from
        :py:func:`attempt_import`) to use to generate the
        :py:class:`.DeferredImportError`.

    Example
    -------

    Declaring a class that inherits from an optional dependency:

    .. doctest::

       >>> from pyomo.common.dependencies import attempt_import, UnavailableClass
       >>> bogus, bogus_available = attempt_import('bogus_unavailable_class')
       >>> class MyPlugin(bogus.plugin if bogus_available else UnavailableClass(bogus)):
       ...     pass

    Attempting to instantiate the derived class generates an exception
    when the module is unavailable:

    .. doctest::

       >>> MyPlugin()
       Traceback (most recent call last):
          ...
       pyomo.common.dependencies.DeferredImportError: The class 'MyPlugin' cannot be
       created because a needed optional dependency was not found (import raised
       ModuleNotFoundError: No module named 'bogus_unavailable_class')

    As does attempting to access class attributes on the derived class:

    .. testcode::
       :hide:

       # We suppress this exception when building the documentation
       # from pyomo.common.flags import building_documentation
       building_documentation(False)

    .. doctest::

       >>> MyPlugin.create_instance()
       Traceback (most recent call last):
          ...
       pyomo.common.dependencies.DeferredImportError: The class attribute
       'MyPlugin.create_instance' is not available because a needed optional
       dependency was not found (import raised ModuleNotFoundError: No module
       named 'bogus_unavailable_class')

    .. testcode::
       :hide:

       building_documentation(None)

    """
    class UnavailableMeta(type):
        ...
    
    
    class UnavailableBase(metaclass=UnavailableMeta):
        ...
    
    

class _DeferredImportIndicatorBase:
    def __and__(self, other): # -> _DeferredAnd:
        ...
    
    def __or__(self, other): # -> _DeferredOr:
        ...
    
    def __rand__(self, other): # -> _DeferredAnd:
        ...
    
    def __ror__(self, other): # -> _DeferredOr:
        ...
    


class DeferredImportIndicator(_DeferredImportIndicatorBase):
    """Placeholder indicating if an import was successful.

    This object serves as a placeholder for the Boolean indicator if a
    deferred module import was successful.  Casting this instance to
    `bool` will cause the import to be attempted.  The actual import logic
    is here and not in the :py:class:`DeferredImportModule` to reduce the number of
    attributes on the :py:class:`DeferredImportModule`.

    :py:class:`DeferredImportIndicator` supports limited logical expressions
    using the ``&`` (and) and ``|`` (or) binary operators.  Creating
    these expressions does not trigger the import of the corresponding
    :py:class:`DeferredImportModule` instances, although casting the
    resulting expression to ``bool()`` will trigger any relevant
    imports.

    """
    def __init__(self, name, error_message, catch_exceptions, minimum_version, original_globals, callback, importer, deferred_submodules) -> None:
        ...
    
    def __bool__(self): # -> bool | None:
        ...
    
    def resolve(self): # -> None:
        ...
    
    def replace_self_in_globals(self, _globals): # -> None:
        ...
    


class _DeferredAnd(_DeferredImportIndicatorBase):
    def __init__(self, a, b) -> None:
        ...
    
    def __bool__(self): # -> bool:
        ...
    


class _DeferredOr(_DeferredImportIndicatorBase):
    def __init__(self, a, b) -> None:
        ...
    
    def __bool__(self): # -> bool:
        ...
    


def check_min_version(module, min_version): # -> bool | Any:
    ...

class DeferredImportCallbackLoader:
    """Custom Loader to resolve registered :py:class:`DeferredImportIndicator` objects

    This :py:class:`importlib.abc.Loader` loader wraps a regular loader
    and automatically resolves the registered
    :py:class:`DeferredImportIndicator` objects after the module is
    loaded.

    """
    def __init__(self, loader, deferred_indicators: List[DeferredImportIndicator]) -> None:
        ...
    
    def module_repr(self, module: ModuleType) -> str:
        ...
    
    def create_module(self, spec) -> ModuleType:
        ...
    
    def exec_module(self, module: ModuleType) -> None:
        ...
    
    def load_module(self, fullname) -> ModuleType:
        ...
    


class DeferredImportCallbackFinder:
    """Custom Finder that will wrap the normal loader to trigger callbacks

    This :py:class:`importlib.abc.MetaPathFinder` finder will wrap the
    normal loader returned by ``PathFinder`` with a loader that will
    trigger custom callbacks after the module is loaded.  We use this to
    trigger the post import callbacks registered through
    :py:func:`attempt_import` even when a user imports the target library
    directly (and not through attribute access on the
    :py:class:`DeferredImportModule`.

    """
    _callbacks = ...
    def find_spec(self, fullname, path, target=...): # -> ModuleSpec | None:
        ...
    
    def invalidate_caches(self): # -> None:
        ...
    


_DeferredImportCallbackFinder = ...
def attempt_import(name, error_message=..., only_catch_importerror=..., minimum_version=..., alt_names=..., callback=..., importer=..., defer_check=..., defer_import=..., deferred_submodules=..., catch_exceptions=...): # -> tuple[DeferredImportModule, DeferredImportIndicator] | tuple[ModuleType | Any, Literal[True]] | tuple[ModuleUnavailable, Literal[False]]:
    """Attempt to import the specified module.

    This will attempt to import the specified module, returning a
    ``(module, available)`` tuple.  If the import was successful, ``module``
    will be the imported module and ``available`` will be True.  If the
    import results in an exception, then ``module`` will be an instance of
    :py:class:`ModuleUnavailable` and ``available`` will be False

    The following

    .. doctest::

       >>> from pyomo.common.dependencies import attempt_import
       >>> numpy, numpy_available = attempt_import('numpy')

    Is roughly equivalent to

    .. doctest::

       >>> from pyomo.common.dependencies import ModuleUnavailable
       >>> try:
       ...     import numpy
       ...     numpy_available = True
       ... except ImportError as e:
       ...     numpy = ModuleUnavailable('numpy', 'Numpy is not available',
       ...                               '', str(e), globals()['__name__'])
       ...     numpy_available = False

    The import can be "deferred" until the first time the code either
    attempts to access the module or checks the Boolean value of the
    available flag.  This allows optional dependencies to be declared at
    the module scope but not imported until they are actually used by
    the module (thereby speeding up the initial package import).
    Deferred imports are handled by two helper classes
    (:py:class:`DeferredImportModule` and
    :py:class:`DeferredImportIndicator`).  Upon actual import,
    :py:meth:`DeferredImportIndicator.resolve()` attempts to replace
    those objects (in both the local and original global namespaces)
    with the imported module and Boolean flag so that subsequent uses of
    the module do not incur any overhead due to the delayed import.

    Parameters
    ----------
    name: str
        The name of the module to import

    error_message: str, optional
        The message for the exception raised by :py:class:`ModuleUnavailable`

    only_catch_importerror: bool, optional
        DEPRECATED: use ``catch_exceptions`` instead of ``only_catch_importerror``.

        If True (the default), exceptions other than ``ImportError`` raised
        during module import will be reraised.  If False, any exception
        will result in returning a :py:class:`ModuleUnavailable` object.
        (deprecated in version 5.7.3)

    minimum_version: str, optional
        The minimum acceptable module version (retrieved from
        ``module.__version__``)

    alt_names: list, optional
        DEPRECATED: ``alt_names`` no longer needs to be specified and is ignored.

        A list of common alternate names by which to look for this
        module in the ``globals()`` namespaces.  For example, the alt_names
        for NumPy would be ``['np']``.  (deprecated in version 6.0)

    callback: Callable[[ModuleType, bool], None], optional
        A function with the signature ``fcn(module, available)`` that
        will be called after the import is first attempted.

    importer: function, optional
        A function that will perform the import and return the imported
        module (or raise an :py:class:`ImportError`).  This is useful
        for cases where there are several equivalent modules and you
        want to import/return the first one that is available.

    defer_check: bool, optional
        DEPRECATED: renamed to ``defer_import`` (deprecated in version 6.7.2)

    defer_import: bool, optional
        If True, then the attempted import is deferred until the first
        use of either the module or the availability flag.  The method
        will return instances of :py:class:`DeferredImportModule` and
        :py:class:`DeferredImportIndicator`.  If False, the import will
        be attempted immediately.  If not set, then the import will be
        deferred unless the ``name`` is already present in
        ``sys.modules``.

    deferred_submodules: Iterable[str], optional
        If provided, an iterable of submodule names within this module
        that can be accessed without triggering a deferred import of
        this module.  For example, this module uses
        ``deferred_submodules=['pyplot', 'pylab']`` for ``matplotlib``.

    catch_exceptions: Iterable[Exception], optional
        If provided, this is the list of exceptions that will be caught
        when importing the target module, resulting in
        ``attempt_import`` returning a :py:class:`ModuleUnavailable`
        instance.  The default is to only catch :py:class:`ImportError`.
        This is useful when a module can regularly return additional
        exceptions during import.

    Returns
    -------
    : module
        the imported module, or an instance of
        :py:class:`ModuleUnavailable`, or an instance of
        :py:class:`DeferredImportModule`
    : bool
        Boolean indicating if the module import succeeded or an instance
        of :py:class:`DeferredImportIndicator`

    """
    ...

@deprecated("``declare_deferred_modules_as_importable()`` is deprecated.  " "Use the :py:class:`declare_modules_as_importable` context manager.", version='6.7.2')
def declare_deferred_modules_as_importable(globals_dict): # -> None:
    """Make all :py:class:`DeferredImportModules` in ``globals_dict`` importable

    This function will go throughout the specified ``globals_dict``
    dictionary and add any instances of :py:class:`DeferredImportModule`
    that it finds (and any of their deferred submodules) to
    ``sys.modules`` so that the modules can be imported through the
    ``globals_dict`` namespace.

    For example, ``pyomo/common/dependencies.py`` declares:

    .. doctest::
       :hide:

       >>> from pyomo.common.dependencies import (
       ...     attempt_import, _finalize_scipy, __dict__ as dep_globals,
       ...     declare_deferred_modules_as_importable, )
       >>> # Sphinx does not provide a proper globals()
       >>> def globals(): return dep_globals

    .. doctest::

       >>> scipy, scipy_available = attempt_import(
       ...     'scipy', callback=_finalize_scipy,
       ...     deferred_submodules=['stats', 'sparse', 'spatial', 'integrate'])
       >>> declare_deferred_modules_as_importable(globals())
       WARNING: DEPRECATED: ...

    Which enables users to use:

    .. doctest::

       >>> import pyomo.common.dependencies.scipy.sparse as spa

    If the deferred import has not yet been triggered, then the
    :py:class:`DeferredImportModule` is returned and named ``spa``.
    However, if the import has already been triggered, then ``spa`` will
    either be the ``scipy.sparse`` module, or a
    :py:class:`ModuleUnavailable` instance.

    """
    ...

class declare_modules_as_importable:
    """Make all :py:class:`ModuleType` and :py:class:`DeferredImportModules`
    importable through the ``globals_dict`` context.

    This context manager will detect all modules imported into the
    specified ``globals_dict`` environment (either directly or through
    :py:func:`attempt_import`) and will make those modules importable
    from the specified ``globals_dict`` context.  It works by detecting
    changes in the specified ``globals_dict`` dictionary and adding any new
    modules or instances of :py:class:`DeferredImportModule` that it
    finds (and any of their deferred submodules) to ``sys.modules`` so
    that the modules can be imported through the ``globals_dict``
    namespace.

    For example, ``pyomo/common/dependencies.py`` declares:

    .. doctest::
       :hide:

       >>> from pyomo.common.dependencies import (
       ...     attempt_import, _finalize_scipy, __dict__ as dep_globals,
       ...     declare_modules_as_importable, )
       >>> # Sphinx does not provide a proper globals()
       >>> def globals(): return dep_globals

    .. doctest::

       >>> with declare_modules_as_importable(globals()):
       ...     scipy, scipy_available = attempt_import(
       ...        'scipy', callback=_finalize_scipy,
       ...        deferred_submodules=['stats', 'sparse', 'spatial', 'integrate'])

    Which enables users to use:

    .. doctest::

       >>> import pyomo.common.dependencies.scipy.sparse as spa

    If the deferred import has not yet been triggered, then the
    :py:class:`DeferredImportModule` is returned and named ``spa``.
    However, if the import has already been triggered, then ``spa`` will
    either be the ``scipy.sparse`` module, or a
    :py:class:`ModuleUnavailable` instance.

    """
    def __init__(self, globals_dict) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    


yaml_load_args = ...
