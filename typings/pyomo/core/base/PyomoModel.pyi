"""
This type stub file was generated by pyright.
"""

from pyomo.common.collections import Bunch
from pyomo.common.deprecation import deprecated
from pyomo.core.base.component import ModelComponentFactory
from pyomo.core.base.block import ScalarBlock

logger = ...
id_func = ...
def global_option(function, name, value): # -> Callable[..., Any]:
    """
    Declare the default value for a global Pyomo configuration option.

    Example use:

    .. code::

       @global_option('config.foo.bar', 1)
       def functor():
           # ...

    """
    ...

class PyomoConfig(Bunch):
    """
    This is a pyomo-specific configuration object, which is a subclass of Container.
    """
    _option = ...
    def __init__(self, *args, **kw) -> None:
        ...
    


class ModelSolution:
    def __init__(self) -> None:
        ...
    
    def __getattr__(self, name): # -> Any:
        ...
    
    def __setattr__(self, name, val): # -> None:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class ModelSolutions:
    def __init__(self, instance) -> None:
        ...
    
    def clear(self, clear_symbol_maps=...): # -> None:
        ...
    
    def __getstate__(self): # -> dict[Any, Any]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __getitem__(self, index):
        ...
    
    def add_symbol_map(self, symbol_map): # -> None:
        ...
    
    def delete_symbol_map(self, smap_id): # -> None:
        ...
    
    def load_from(self, results, allow_consistent_values_for_fixed_vars=..., comparison_tolerance_for_fixed_vars=..., ignore_invalid_labels=..., id=..., delete_symbol_map=..., clear=..., default_variable_value=..., select=..., ignore_fixed_vars=...): # -> None:
        """
        Load solver results
        """
        ...
    
    def store_to(self, results, cuid=..., skip_stale_vars=...): # -> None:
        """
        Return a Solution() object that is populated with the values in the model.
        """
        ...
    
    def add_solution(self, solution, smap_id, delete_symbol_map=..., cache=..., ignore_invalid_labels=..., ignore_missing_symbols=..., default_variable_value=...): # -> int:
        ...
    
    def select(self, index=..., allow_consistent_values_for_fixed_vars=..., comparison_tolerance_for_fixed_vars=..., ignore_invalid_labels=..., ignore_fixed_vars=...): # -> None:
        """
        Select a solution from the model's solutions.

        allow_consistent_values_for_fixed_vars: a flag that
        indicates whether a solution can specify consistent
        values for variables in the model that are fixed.

        ignore_invalid_labels: a flag that indicates whether
        labels in the solution that don't appear in the model
        yield an error. This allows for loading a results object
        generated from one model into another related, but not
        identical, model.
        """
        ...
    


@ModelComponentFactory.register('Model objects can be used as a component of other models.')
class Model(ScalarBlock):
    """
    An optimization model.  By default, this defers construction of components
    until data is loaded.
    """
    _Block_reserved_words = ...
    def __new__(cls, *args, **kwds): # -> Self:
        ...
    
    def __init__(self, name=..., **kwargs) -> None:
        """Constructor"""
        ...
    
    def compute_statistics(self, active=...): # -> None:
        """
        Compute model statistics
        """
        ...
    
    def nvariables(self):
        ...
    
    def nconstraints(self):
        ...
    
    def nobjectives(self):
        ...
    
    def create_instance(self, filename=..., data=..., name=..., namespace=..., namespaces=..., profile_memory=..., report_timing=..., **kwds): # -> Self:
        """
        Create a concrete instance of an abstract model, possibly using data
        read in from a file.

        Parameters
        ----------
        filename: `str`, optional
            The name of a Pyomo Data File that will be used to load data into
            the model.
        data: `dict`, optional
            A dictionary containing initialization data for the model to be
            used if there is no filename
        name: `str`, optional
            The name given to the model.
        namespace: `str`, optional
            A namespace used to select data.
        namespaces: `list`, optional
            A list of namespaces used to select data.
        profile_memory: `int`, optional
            A number that indicates the profiling level.
        report_timing: `bool`, optional
            Report timing statistics during construction.

        """
        ...
    
    @deprecated("The Model.preprocess() method is deprecated and no " "longer performs any actions", version='6.0')
    def preprocess(self, preprocessor=...): # -> None:
        ...
    
    def load(self, arg, namespaces=..., profile_memory=...): # -> None:
        """
        Load the model with data from a file, dictionary or DataPortal object.
        """
        ...
    


@ModelComponentFactory.register('A concrete optimization model that does not defer construction of components.')
class ConcreteModel(Model):
    """
    A concrete optimization model that does not defer construction of
    components.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    


@ModelComponentFactory.register('An abstract optimization model that defers construction of components.')
class AbstractModel(Model):
    """
    An abstract optimization model that defers construction of
    components.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    


