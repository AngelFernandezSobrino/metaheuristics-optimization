"""
This type stub file was generated by pyright.
"""

from pyomo.common.deprecation import deprecated

class _CharMapper:
    def __init__(self, preserve, translate, other) -> None:
        """
        Arguments::
           preserve: a string of characters to preserve
           translate: a dict or key/value list of characters to translate
           other: the character to return for all characters not in
                  preserve or translate
        """
        ...
    
    def __getitem__(self, c): # -> Any:
        ...
    
    def make_table(self): # -> LiteralString:
        ...
    


_alpha = ...
_digit = ...
_cpxlp_translation_table = ...
def cpxlp_label_from_name(name): # -> str:
    ...

_alphanum_translation_table = ...
def alphanum_label_from_name(name): # -> str:
    ...

class CuidLabeler:
    def __call__(self, obj=...): # -> ComponentUID:
        ...
    


class CounterLabeler:
    def __init__(self, start=...) -> None:
        ...
    
    def __call__(self, obj=...): # -> int:
        ...
    


class NumericLabeler:
    def __init__(self, prefix, start=...) -> None:
        ...
    
    def __call__(self, obj=...):
        ...
    
    @deprecated("The 'remove_obj' method is no longer " "necessary now that 'getname' does not " "support the use of a name buffer", version="6.4.1")
    def remove_obj(self, obj): # -> None:
        ...
    


class CNameLabeler:
    def __call__(self, obj):
        ...
    


class LPFileLabeler:
    def __call__(self, obj): # -> str:
        ...
    
    @deprecated("The 'remove_obj' method is no longer " "necessary now that 'getname' does not " "support the use of a name buffer", version="6.4.1")
    def remove_obj(self, obj): # -> None:
        ...
    


TextLabeler = LPFileLabeler
class AlphaNumericTextLabeler:
    def __call__(self, obj): # -> str:
        ...
    


class NameLabeler:
    def __call__(self, obj):
        ...
    


class ShortNameLabeler:
    def __init__(self, limit, suffix, start=..., labeler=..., prefix=..., caseInsensitive=..., legalRegex=...) -> None:
        ...
    
    def __call__(self, obj=...): # -> str:
        ...
    


