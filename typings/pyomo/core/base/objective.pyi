"""
This type stub file was generated by pyright.
"""

from pyomo.common.pyomo_typing import overload
from pyomo.common.deprecation import RenamedClass
from pyomo.core.base.component import ActiveComponentData, ModelComponentFactory
from pyomo.core.base.indexed_component import ActiveIndexedComponent
from pyomo.core.base.expression import NamedExpressionData

logger = ...
TEMPLATIZE_OBJECTIVES = ...
_rule_returned_none_error = ...
def simple_objective_rule(rule): # -> PyomoObject | Any:
    """
    This is a decorator that translates None into Objective.Skip.
    This supports a simpler syntax in objective rules, though these
    can be more difficult to debug when errors occur.

    Example use:

    .. code::

        @simple_objective_rule
        def O_rule(model, i, j):
            # ...

        model.o = Objective(rule=simple_objective_rule(...))

    """
    ...

def simple_objectivelist_rule(rule): # -> PyomoObject | Any:
    """
    This is a decorator that translates None into ObjectiveList.End.
    This supports a simpler syntax in objective rules, though these
    can be more difficult to debug when errors occur.

    Example use:

    .. code::

        @simple_objectivelist_rule
        def O_rule(model, i, j):
            # ...

        model.o = ObjectiveList(expr=simple_objectivelist_rule(...))

    """
    ...

class ObjectiveData(NamedExpressionData, ActiveComponentData):
    """This class defines the data for a single objective.

    Note that this is a subclass of NumericValue to allow
    objectives to be used as part of expressions.

    Parameters
    ----------
    expr:
        The Pyomo expression stored in this objective.

    sense:
        The direction for this objective.

    component: Objective
        The Objective object that owns this data.

    Attributes
    ----------
    expr:
        The Pyomo expression for this objective

    """
    __slots__ = ...
    def __init__(self, expr=..., sense=..., component=...) -> None:
        ...
    
    def is_minimizing(self): # -> bool:
        """Return True if this is a minimization objective."""
        ...
    
    def set_value(self, expr): # -> None:
        ...
    
    @property
    def sense(self): # -> ObjectiveSense:
        """Access sense (direction) of this objective."""
        ...
    
    @sense.setter
    def sense(self, sense): # -> None:
        """Set the sense (direction) of this objective."""
        ...
    
    def set_sense(self, sense): # -> None:
        """Set the sense (direction) of this objective."""
        ...
    


class _ObjectiveData(metaclass=RenamedClass):
    __renamed__new_class__ = ObjectiveData
    __renamed__version__ = ...


class _GeneralObjectiveData(metaclass=RenamedClass):
    __renamed__new_class__ = ObjectiveData
    __renamed__version__ = ...


class TemplateObjectiveData(ObjectiveData):
    __slots__ = ...
    def __init__(self, template_info, component, index, sense) -> None:
        ...
    
    @property
    def args(self): # -> Any:
        ...
    
    def template_expr(self): # -> Any:
        ...
    
    def set_value(self, expr):
        ...
    


@ModelComponentFactory.register("Expressions that are minimized or maximized.")
class Objective(ActiveIndexedComponent):
    """
    This modeling component defines an objective expression.

    Note that this is a subclass of NumericValue to allow
    objectives to be used as part of expressions.

    Constructor arguments:
        expr
            A Pyomo expression for this objective
        rule
            A function that is used to construct objective expressions
        sense
            Indicate whether minimizing (the default) or maximizing
        name
            A name for this component
        doc
            A text string describing this component

    Public class attributes:
        doc
            A text string describing this component
        name
            A name for this component
        active
            A boolean that is true if this component will be used to construct
            a model instance
        rule
            The rule used to initialize the objective(s)
        sense
            The objective sense

    Private class attributes:
        _constructed
            A boolean that is true if this component has been constructed
        _data
            A dictionary from the index set to component data objects
        _index
            The set of valid indices
        _model
            A weakref to the model that owns this component
        _parent
            A weakref to the parent block that owns this component
        _type
            The class type for the derived subclass
    """
    _ComponentDataClass = ObjectiveData
    NoObjective = ActiveIndexedComponent.Skip
    def __new__(cls, *args, **kwds): # -> Self:
        ...
    
    @overload
    def __init__(self, *indexes, expr=..., rule=..., sense=..., name=..., doc=...) -> None:
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def construct(self, data=...):
        """
        Construct the expression(s) for this objective.
        """
        ...
    
    def display(self, prefix=..., ostream=...): # -> None:
        """Provide a verbose display of this object"""
        ...
    


class ScalarObjective(ObjectiveData, Objective):
    """
    ScalarObjective is the implementation representing a single,
    non-indexed objective.
    """
    def __init__(self, *args, **kwd) -> None:
        ...
    
    def __call__(self, exception=...):
        ...
    
    @property
    def expr(self): # -> Any:
        """Access the expression of this objective."""
        ...
    
    @expr.setter
    def expr(self, expr): # -> None:
        """Set the expression of this objective."""
        ...
    
    @property
    def sense(self): # -> Any:
        """Access sense (direction) of this objective."""
        ...
    
    @sense.setter
    def sense(self, sense): # -> None:
        """Set the sense (direction) of this objective."""
        ...
    
    def clear(self): # -> None:
        ...
    
    def set_value(self, expr): # -> None:
        """Set the expression of this objective."""
        ...
    
    def set_sense(self, sense): # -> None:
        """Set the sense (direction) of this objective."""
        ...
    
    def add(self, index, expr): # -> Self:
        """Add an expression with a given index."""
        ...
    


class SimpleObjective(metaclass=RenamedClass):
    __renamed__new_class__ = ScalarObjective
    __renamed__version__ = ...


class IndexedObjective(Objective):
    def add(self, index, expr): # -> Self | None:
        """Add an objective with a given index."""
        ...
    


@ModelComponentFactory.register("A list of objective expressions.")
class ObjectiveList(IndexedObjective):
    """
    An objective component that represents a list of objectives.
    Objectives can be indexed by their index, but when they are added
    an index value is not specified.
    """
    class End:
        ...
    
    
    def __init__(self, **kwargs) -> None:
        """Constructor"""
        ...
    
    def construct(self, data=...): # -> None:
        """
        Construct the expression(s) for this objective.
        """
        ...
    
    def add(self, expr, sense=...): # -> Self | None:
        """Add an objective to the list."""
        ...
    


