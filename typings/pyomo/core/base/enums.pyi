"""
This type stub file was generated by pyright.
"""

import enum
import sys

if sys.version_info[: 2] >= (3, 11):
    strictEnum = ...
else:
    strictEnum = ...
class TraversalStrategy(enum.Enum, strictEnum):
    BreadthFirstSearch = ...
    PrefixDepthFirstSearch = ...
    PostfixDepthFirstSearch = ...
    BFS = ...
    ParentLastDepthFirstSearch = ...
    PostfixDFS = ...
    ParentFirstDepthFirstSearch = ...
    PrefixDFS = ...
    DepthFirstSearch = ...
    DFS = ...


class SortComponents(enum.Flag, strictEnum):
    """
    This class is a convenient wrapper for specifying various sort
    ordering.  We pass these objects to the "sort" argument to various
    accessors / iterators to control how much work we perform sorting
    the resultant list.  The idea is that
    "sort=SortComponents.deterministic" is more descriptive than
    "sort=True".
    """
    UNSORTED = ...
    ORDERED_INDICES = ...
    SORTED_INDICES = ...
    ALPHABETICAL = ...
    unsorted = ...
    indices = ...
    declOrder = ...
    declarationOrder = ...
    alphaOrder = ...
    alphabeticalOrder = ...
    alphabetical = ...
    deterministic = ...
    sortBoth = ...
    alphabetizeComponentAndIndex = ...
    @staticmethod
    def default(): # -> Literal[SortComponents.UNSORTED]:
        ...
    
    @staticmethod
    def sorter(sort_by_names=..., sort_by_keys=...): # -> SortComponents:
        ...
    
    @staticmethod
    def sort_names(flag): # -> bool:
        ...
    
    @staticmethod
    def sort_indices(flag): # -> bool:
        ...
    


