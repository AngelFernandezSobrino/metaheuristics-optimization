"""
This type stub file was generated by pyright.
"""

from pyomo.common.deprecation import RenamedClass
from pyomo.core.expr.boolean_value import BooleanValue
from pyomo.core.expr.numvalue import value
from pyomo.core.base.component import ComponentData, ModelComponentFactory
from pyomo.core.base.indexed_component import IndexedComponent

logger = ...
_logical_var_types = ...
class _DeprecatedImplicitAssociatedBinaryVariable:
    __slots__ = ...
    def __init__(self, boolvar) -> None:
        ...
    
    def __call__(self): # -> Var | AbstractScalarVar | IndexedVar:
        ...
    
    def __getstate__(self): # -> Any | None:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class BooleanVarData(ComponentData, BooleanValue):
    """This class defines the data for a single Boolean variable.

    Parameters
    ----------
    component: Component
        The BooleanVar object that owns this data.

    Attributes
    ----------
    fixed: bool
        If True, then this variable is treated as a fixed constant in
        the model.

    """
    __slots__ = ...
    __autoslot_mappers__ = ...
    def __init__(self, component=...) -> None:
        ...
    
    def is_fixed(self): # -> bool:
        """Returns True if this variable is fixed, otherwise returns False."""
        ...
    
    def is_constant(self): # -> Literal[False]:
        """Returns False because this is not a constant in an expression."""
        ...
    
    def is_variable_type(self): # -> Literal[True]:
        """Returns True because this is a variable."""
        ...
    
    def is_potentially_variable(self): # -> Literal[True]:
        """Returns True because this is a variable."""
        ...
    
    def set_value(self, val, skip_validation=...): # -> None:
        """
        Set the value of this numeric object, after
        validating its value. If the 'valid' flag is True,
        then the validation step is skipped.
        """
        ...
    
    def clear(self): # -> None:
        ...
    
    def __call__(self, exception=...): # -> bool | None:
        """Compute the value of this variable."""
        ...
    
    @property
    def value(self): # -> bool | None:
        """bool : the current value for this variable."""
        ...
    
    @value.setter
    def value(self, val): # -> None:
        ...
    
    @property
    def domain(self):
        """BooleanSet : the domain for this variable."""
        ...
    
    @property
    def stale(self): # -> bool:
        """
        bool : A Boolean indicating whether the value of this variable is
        Consistent with the most recent solve.  `True` indicates that
        this variable's value was set prior to the most recent solve and
        was not updated by the results returned by the solve.
        """
        ...
    
    @stale.setter
    def stale(self, val): # -> None:
        ...
    
    def get_associated_binary(self): # -> None:
        """Get the binary VarData associated with this
        BooleanVarData"""
        ...
    
    def associate_binary_var(self, binary_var): # -> None:
        """Associate a binary VarData to this BooleanVarData"""
        ...
    
    def fix(self, value=..., skip_validation=...): # -> None:
        """Fix the value of this variable (treat as nonvariable)

        This sets the `fixed` indicator to True.  If ``value`` is
        provided, the value (and the ``skip_validation`` flag) are first
        passed to :py:meth:`set_value()`.

        """
        ...
    
    def unfix(self): # -> None:
        """Unfix this variable (treat as variable)

        This sets the `fixed` indicator to False.

        """
        ...
    
    def free(self): # -> None:
        """Alias for :py:meth:`unfix`"""
        ...
    


class _BooleanVarData(metaclass=RenamedClass):
    __renamed__new_class__ = BooleanVarData
    __renamed__version__ = ...


class _GeneralBooleanVarData(metaclass=RenamedClass):
    __renamed__new_class__ = BooleanVarData
    __renamed__version__ = ...


@ModelComponentFactory.register("Logical decision variables.")
class BooleanVar(IndexedComponent):
    """A logical variable, which may be defined over an index.

    Args:
        initialize (float or function, optional): The initial value for
            the variable, or a rule that returns initial values.
        rule (float or function, optional): An alias for `initialize`.
        dense (bool, optional): Instantiate all elements from
            `index_set()` when constructing the Var (True) or just the
            variables returned by `initialize`/`rule` (False).  Defaults
            to True.
    """
    _ComponentDataClass = BooleanVarData
    def __new__(cls, *args, **kwds): # -> Self:
        ...
    
    def __init__(self, *args, **kwd) -> None:
        ...
    
    def flag_as_stale(self): # -> None:
        """
        Set the 'stale' attribute of every variable data object to True.
        """
        ...
    
    def get_values(self, include_fixed_values=...): # -> dict[Any, Any]:
        """
        Return a dictionary of index-value pairs.
        """
        ...
    
    extract_values = ...
    def set_values(self, new_values, skip_validation=...): # -> None:
        """
        Set data values from a dictionary.

        The default behavior is to validate the values in the
        dictionary.
        """
        ...
    
    def construct(self, data=...): # -> None:
        """Construct this component."""
        ...
    
    def add(self, index): # -> ComponentData:
        """Add a variable with a particular index."""
        ...
    


class ScalarBooleanVar(BooleanVarData, BooleanVar):
    """A single variable."""
    def __init__(self, *args, **kwd) -> None:
        ...
    
    @property
    def value(self): # -> Any:
        """bool : the current value of this variable."""
        ...
    
    @value.setter
    def value(self, val): # -> None:
        ...
    
    @property
    def domain(self): # -> Any:
        """BooleanSet : the domain for this variable."""
        ...
    
    def fix(self, value=..., skip_validation=...): # -> None:
        """
        Set the fixed indicator to True. Value argument is optional,
        indicating the variable should be fixed at its current value.
        """
        ...
    
    def unfix(self): # -> None:
        """Sets the fixed indicator to False."""
        ...
    


class SimpleBooleanVar(metaclass=RenamedClass):
    __renamed__new_class__ = ScalarBooleanVar
    __renamed__version__ = ...


class IndexedBooleanVar(BooleanVar):
    """An array of variables."""
    def fix(self, value=..., skip_validation=...): # -> None:
        """Fix all variables in this IndexedBooleanVar (treat as nonvariable)

        This sets the `fixed` indicator to True for every variable in
        this IndexedBooleanVar.  If ``value`` is provided, the value
        (and the ``skip_validation`` flag) are first passed to
        :py:meth:`set_value()`.

        """
        ...
    
    def unfix(self): # -> None:
        """Unfix all variables in this IndexedBooleanVar (treat as variable)

        This sets the `fixed` indicator to False for every variable in
        this IndexedBooleanVar.

        """
        ...
    
    def free(self): # -> None:
        """Alias for :py:meth:`unfix`"""
        ...
    
    @property
    def domain(self):
        """BooleanSet : the domain for this variable."""
        ...
    
    def __getitem__(self, args): # -> GetItemExpression | ComponentData:
        ...
    


@ModelComponentFactory.register("List of logical decision variables.")
class BooleanVarList(IndexedBooleanVar):
    """
    Variable-length indexed variable objects used to construct Pyomo models.
    """
    def __init__(self, **kwargs) -> None:
        ...
    
    def construct(self, data=...): # -> None:
        """Construct this component."""
        ...
    
    def add(self): # -> GetItemExpression | ComponentData:
        """Add a variable to this list."""
        ...
    


