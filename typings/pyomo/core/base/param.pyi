"""
This type stub file was generated by pyright.
"""

from pyomo.common.pyomo_typing import overload
from typing import Type, Union
from pyomo.common.deprecation import RenamedClass
from pyomo.core.expr.numvalue import NumericValue
from pyomo.core.base.component import ComponentData, ModelComponentFactory
from pyomo.core.base.indexed_component import IndexedComponent, IndexedComponent_NDArrayMixin
from pyomo.core.base.set import _AnySet

logger = ...
class _ImplicitAny(_AnySet):
    """An Any that issues a deprecation warning for non-Real values.

    This is a helper class to implement the deprecation warnings for the
    change of Param's implicit domain from Any to Reals.

    """
    __slots__ = ...
    __autoslot_mappers__ = ...
    def __new__(cls, **kwargs): # -> Self | AbstractOrderedScalarSet | AbstractSortedScalarSet | AbstractFiniteScalarSet | IndexedSet:
        ...
    
    def __init__(self, owner, **kwargs) -> None:
        ...
    
    def __contains__(self, val): # -> Literal[True]:
        ...
    
    def getname(self, fully_qualified=..., name_buffer=..., relative_to=...): # -> str:
        ...
    


class ParamData(ComponentData, NumericValue):
    """
    This class defines the data for a mutable parameter.

    Constructor Arguments:
        owner       The Param object that owns this data.
        value       The value of this parameter.

    Public Class Attributes:
        value       The numeric value of this variable.
    """
    __slots__ = ...
    def __init__(self, component) -> None:
        ...
    
    def clear(self): # -> None:
        """Clear the data in this component"""
        ...
    
    def set_value(self, value, idx=...): # -> None:
        """Set the value of this ParamData object, performing unit conversion
        and validation as necessary.

        """
        ...
    
    def __call__(self, exception=...): # -> type[NoValue] | Any | None:
        """
        Return the value of this object.
        """
        ...
    
    @property
    def value(self): # -> type[NoValue] | Any | None:
        """Return the value for this variable."""
        ...
    
    @value.setter
    def value(self, val): # -> None:
        """Set the value for this variable."""
        ...
    
    def get_units(self):
        """Return the units for this ParamData"""
        ...
    
    def is_fixed(self): # -> Literal[True]:
        """
        Returns True because this value is fixed.
        """
        ...
    
    def is_constant(self): # -> Literal[False]:
        """
        Returns False because this is not a constant in an expression.
        """
        ...
    
    def is_parameter_type(self): # -> Literal[True]:
        """
        Returns True because this is a parameter object.
        """
        ...
    


class _ParamData(metaclass=RenamedClass):
    __renamed__new_class__ = ParamData
    __renamed__version__ = ...


@ModelComponentFactory.register("Parameter data that is used to define a model instance.")
class Param(IndexedComponent, IndexedComponent_NDArrayMixin):
    """
    A parameter value, which may be defined over an index.

    Constructor Arguments:
        domain
            A set that defines the type of values that each parameter must be.
        within
            A set that defines the type of values that each parameter must be.
        validate
            A rule for validating this parameter w.r.t. data that exists in
            the model
        default
            A scalar, rule, or dictionary that defines default values for
            this parameter
        initialize
            A dictionary or rule for setting up this parameter with existing
            model data
        unit: pyomo unit expression
            An expression containing the units for the parameter
        mutable: `boolean`
            Flag indicating if the value of the parameter may change between
            calls to a solver. Defaults to `False`
        name
            Name for this component.
        doc
            Text describing this component.
    """
    DefaultMutable = ...
    _ComponentDataClass = ParamData
    class NoValue:
        """A dummy type that is pickle-safe that we can use as the default
        value for Params to indicate that no valid value is present."""
        ...
    
    
    @overload
    def __new__(cls: Type[Param], *args, **kwds) -> Union[ScalarParam, IndexedParam]:
        ...
    
    @overload
    def __new__(cls: Type[ScalarParam], *args, **kwds) -> ScalarParam:
        ...
    
    @overload
    def __new__(cls: Type[IndexedParam], *args, **kwds) -> IndexedParam:
        ...
    
    def __new__(cls, *args, **kwds): # -> Self:
        ...
    
    @overload
    def __init__(self, *indexes, rule=..., initialize=..., domain=..., within=..., validate=..., mutable=..., default=..., initialize_as_dense=..., units=..., name=..., doc=...) -> None:
        ...
    
    def __init__(self, *args, **kwd) -> None:
        ...
    
    def __len__(self): # -> int:
        """
        Return the number of component data objects stored by this
        component.  If a default value is specified, then the
        length equals the number of items in the component index.
        """
        ...
    
    def __contains__(self, idx): # -> bool:
        """
        Return true if the index is in the dictionary.  If the default value
        is specified, then all members of the component index are valid.
        """
        ...
    
    @property
    def mutable(self): # -> bool:
        ...
    
    def get_units(self): # -> _PyomoUnit:
        """Return the units for this ParamData"""
        ...
    
    def sparse_keys(self): # -> list[Any]:
        """Return a list of keys in the defined parameters"""
        ...
    
    def sparse_values(self): # -> list[Any]:
        """Return a list of the defined param data objects"""
        ...
    
    def sparse_items(self): # -> list[tuple[Any, Any]]:
        """Return a list (index,data) tuples for defined parameters"""
        ...
    
    def sparse_iterkeys(self): # -> dict_keys[Any, Any]:
        """Return an iterator for the keys in the defined parameters"""
        ...
    
    def sparse_itervalues(self): # -> dict_values[Any, Any]:
        """Return an iterator for the defined param data objects"""
        ...
    
    def sparse_iteritems(self): # -> dict_items[Any, Any]:
        """Return an iterator of (index,data) tuples for defined parameters"""
        ...
    
    def extract_values(self): # -> dict[Any | None, Any] | dict[None, Any] | dict[Any | None, ComponentData]:
        """
        A utility to extract all index-value pairs defined for this
        parameter, returned as a dictionary.

        This method is useful in contexts where key iteration and
        repeated __getitem__ calls are too expensive to extract
        the contents of a parameter.
        """
        ...
    
    def extract_values_sparse(self): # -> dict[Any, Any] | dict[None, Any]:
        """
        A utility to extract all index-value pairs defined with non-default
        values, returned as a dictionary.

        This method is useful in contexts where key iteration and
        repeated __getitem__ calls are too expensive to extract
        the contents of a parameter.
        """
        ...
    
    def store_values(self, new_values, check=...): # -> None:
        """
        A utility to update a Param with a dictionary or scalar.

        If check=True, then both the index and value
        are checked through the __getitem__ method.  Using check=False
        should only be used by developers!
        """
        ...
    
    def set_default(self, val): # -> None:
        """
        Perform error checks and then set the default value for this parameter.

        NOTE: this test will not validate the value of function return values.
        """
        ...
    
    def default(self): # -> type[NoValue]:
        """
        Return the value of the parameter default.

        Possible values:
            Param.NoValue
                No default value is provided.
            Numeric
                A constant value that is the default value for all undefined
                parameters.
            Function
                f(model, i) returns the value for the default value for
                parameter i
        """
        ...
    
    def construct(self, data=...): # -> None:
        """
        Initialize this component.

        A parameter is constructed using the initial data or
        the data loaded from an external source.  We first
        set all the values based on self._rule, and then
        allow the data dictionary to overwrite anything.

        Note that we allow an undefined Param value to be
        constructed.  We throw an exception if a user tries
        to use an uninitialized Param.
        """
        ...
    


class ScalarParam(ParamData, Param):
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def __call__(self, exception=...): # -> ComponentData | type[NoValue] | Any | None:
        """
        Return the value of this parameter.
        """
        ...
    
    def set_value(self, value, index=...): # -> None:
        ...
    
    def is_constant(self): # -> bool | None:
        """Determine if this ScalarParam is constant (and can be eliminated)

        Returns False if either unconstructed or mutable, as it must be kept
        in expressions (as it either doesn't have a value yet or the value
        can change later.
        """
        ...
    


class SimpleParam(metaclass=RenamedClass):
    __renamed__new_class__ = ScalarParam
    __renamed__version__ = ...


class IndexedParam(Param):
    def __call__(self, exception=...): # -> None:
        """Compute the value of the parameter"""
        ...
    
    def __getitem__(self, args) -> ParamData:
        ...
    


