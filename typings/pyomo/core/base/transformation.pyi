"""
This type stub file was generated by pyright.
"""

from pyomo.common.deprecation import deprecated

class TransformationInfo:
    ...


class TransformationData:
    """
    This is a container class that supports named data objects.
    """
    def __init__(self) -> None:
        ...
    
    def __getitem__(self, name):
        ...
    


class Transformation:
    """
    Base class for all model transformations.
    """
    def __init__(self, **kwds) -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, t, v, traceback): # -> None:
        ...
    
    @deprecated("Transformation.apply() has been deprecated.  Please use either " "Transformation.apply_to() for in-place transformations or " "Transformation.create_using() for transformations that create a " "new, independent transformed model instance.", version='4.3.11323')
    def apply(self, model, **kwds):
        ...
    
    def apply_to(self, model, **kwds):
        """
        Apply the transformation to the given model.
        """
        ...
    
    def create_using(self, model, **kwds):
        """
        Create a new model with this transformation
        """
        ...
    


class ReverseTransformationToken:
    """
    Class returned by reversible transformations' apply_to methods that
    can be passed back to the transformation in order to revert its changes
    to the model.

    We store the transformation that created it, so that we have some basic
    error checking when the user attempts to revert, and we store a dictionary
    that can be whatever the transformation wants/needs in order to revert
    itself.

    args:
        transformation: The class of the transformation that created this token
        model: The model being transformed when this token was created
        targets: The targets on 'model' being transformed when this token
                 was created.
        reverse_dict: Dictionary with everything the transformation needs to
                      undo itself.
    """
    def __init__(self, transformation, model, targets, reverse_dict) -> None:
        ...
    
    @property
    def transformation(self): # -> Any:
        ...
    
    @property
    def reverse_dict(self): # -> Any:
        ...
    
    def check_token_valid(self, cls, model, targets): # -> None:
        ...
    


TransformationFactory = ...
@deprecated(version='4.3.11323')
def apply_transformation(*args, **kwds): # -> list[Any] | None:
    ...

