"""
This type stub file was generated by pyright.
"""

import pyomo.core.expr.numeric_expr as numeric_expr
from pyomo.common.pyomo_typing import overload
from pyomo.common.deprecation import RenamedClass
from pyomo.core.base.component import ComponentData, ModelComponentFactory
from pyomo.core.base.indexed_component import IndexedComponent

logger = ...
class NamedExpressionData(numeric_expr.NumericValue):
    """An object that defines a generic "named expression".

    This is the base class for both :class:`ExpressionData` and
    :class:`ObjectiveData`.
    """
    __slots__ = ...
    EXPRESSION_SYSTEM = ...
    PRECEDENCE = ...
    ASSOCIATIVITY = ...
    def __call__(self, exception=...):
        """Compute the value of this expression."""
        ...
    
    def create_node_with_local_data(self, values, classtype=...):
        """
        Construct a simple expression after constructing the
        contained expression.

        This class provides a consistent interface for constructing a
        node, which is used in tree visitor scripts.
        """
        ...
    
    def is_named_expression_type(self): # -> Literal[True]:
        """A boolean indicating whether this in a named expression."""
        ...
    
    def is_expression_type(self, expression_system=...): # -> Literal[True]:
        """A boolean indicating whether this in an expression."""
        ...
    
    def arg(self, index):
        ...
    
    @property
    def args(self): # -> tuple[Any]:
        ...
    
    def nargs(self): # -> Literal[1]:
        ...
    
    def clone(self): # -> Self:
        """Return a clone of this expression (no-op)."""
        ...
    
    def polynomial_degree(self): # -> None:
        """A tuple of subexpressions involved in this expressions operation."""
        ...
    
    def is_potentially_variable(self): # -> Literal[True]:
        ...
    
    @property
    def expr(self): # -> NumericConstant | None:
        ...
    
    @expr.setter
    def expr(self, value): # -> None:
        ...
    
    def set_value(self, expr): # -> None:
        """Set the expression on this expression."""
        ...
    
    def is_constant(self): # -> Literal[False]:
        """A boolean indicating whether this expression is constant."""
        ...
    
    def is_fixed(self): # -> Literal[True]:
        """A boolean indicating whether this expression is fixed."""
        ...
    
    def __iadd__(self, other):
        ...
    
    def __imul__(self, other):
        ...
    
    def __idiv__(self, other):
        ...
    
    def __itruediv__(self, other):
        ...
    
    def __ipow__(self, other):
        ...
    


class _ExpressionData(metaclass=RenamedClass):
    __renamed__new_class__ = NamedExpressionData
    __renamed__version__ = ...


class _GeneralExpressionDataImpl(metaclass=RenamedClass):
    __renamed__new_class__ = NamedExpressionData
    __renamed__version__ = ...


class ExpressionData(NamedExpressionData, ComponentData):
    """An object that defines an expression that is never cloned

    Parameters
    ----------
    expr : NumericValue
        The Pyomo expression stored in this expression.

    component : Expression
        The Expression object that owns this data.

    """
    __slots__ = ...
    def __init__(self, expr=..., component=...) -> None:
        ...
    


class _GeneralExpressionData(metaclass=RenamedClass):
    __renamed__new_class__ = ExpressionData
    __renamed__version__ = ...


@ModelComponentFactory.register("Named expressions that can be used in other expressions.")
class Expression(IndexedComponent):
    """A shared expression container, which may be defined over an index.

    Parameters
    ----------
    rule : ~.Initializer

        The source to use to initialize the expression(s) in this
        component.  See :func:`.Initializer` for accepted argument types.

    initialize :
        A synonym for `rule`

    expr :
        A synonym for `rule`

    name : str
        Name of this component; will be overridden if this is assigned
        to a Block.

    doc : str
        Text describing this component.

    """
    _ComponentDataClass = ExpressionData
    NoConstraint = IndexedComponent.Skip
    def __new__(cls, *args, **kwds): # -> Self:
        ...
    
    @overload
    def __init__(self, *indexes, rule=..., expr=..., initialize=..., name=..., doc=...) -> None:
        ...
    
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def display(self, prefix=..., ostream=...): # -> None:
        """TODO"""
        ...
    
    def extract_values(self): # -> dict[Any | None, Any]:
        ...
    
    def store_values(self, new_values): # -> None:
        ...
    
    def construct(self, data=...): # -> None:
        """Apply the rule to construct values in this set"""
        ...
    


class ScalarExpression(ExpressionData, Expression):
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def __call__(self, exception=...):
        """Return expression on this expression."""
        ...
    
    @property
    def expr(self): # -> Any:
        """Return expression on this expression."""
        ...
    
    @expr.setter
    def expr(self, expr): # -> None:
        """Set the expression on this expression."""
        ...
    
    def clear(self): # -> None:
        ...
    
    def set_value(self, expr): # -> None:
        """Set the expression on this expression."""
        ...
    
    def is_constant(self): # -> Literal[False]:
        """A boolean indicating whether this expression is constant."""
        ...
    
    def is_fixed(self): # -> Literal[True]:
        """A boolean indicating whether this expression is fixed."""
        ...
    
    def add(self, index, expr): # -> Self:
        """Add an expression with a given index."""
        ...
    


class SimpleExpression(metaclass=RenamedClass):
    __renamed__new_class__ = ScalarExpression
    __renamed__version__ = ...


class IndexedExpression(Expression):
    def add(self, index, expr): # -> ExpressionData | None:
        """Add an expression with a given index."""
        ...
    


