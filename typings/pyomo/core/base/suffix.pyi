"""
This type stub file was generated by pyright.
"""

from pyomo.common.collections import ComponentMap
from pyomo.common.deprecation import deprecated
from pyomo.common.enums import IntEnum
from pyomo.common.pyomo_typing import overload
from pyomo.core.base.component import ActiveComponent, ModelComponentFactory
from pyomo.core.base.disable_methods import disable_methods

logger = ...
_SUFFIX_API = ...
def suffix_generator(a_block, datatype=..., direction=..., active=...): # -> filter[Any]:
    ...

def active_export_suffix_generator(a_block, datatype=...): # -> filter[Any]:
    ...

def export_suffix_generator(a_block, datatype=...): # -> filter[Any]:
    ...

def active_import_suffix_generator(a_block, datatype=...): # -> filter[Any]:
    ...

def import_suffix_generator(a_block, datatype=...): # -> filter[Any]:
    ...

def active_local_suffix_generator(a_block, datatype=...): # -> filter[Any]:
    ...

def local_suffix_generator(a_block, datatype=...): # -> filter[Any]:
    ...

def active_suffix_generator(a_block, datatype=...): # -> filter[Any]:
    ...

class SuffixDataType(IntEnum):
    """Suffix data types

    AMPL only supports two data types for Suffixes: int and float.  The
    numeric values here are specific to the NL file format and should
    not be changed without checking/updating the NL writer.

    """
    INT = ...
    FLOAT = ...


class SuffixDirection(IntEnum):
    """Suffix data flow definition.

    This identifies if the specific Suffix is to be sent to the solver,
    read from the solver output, both, or neither:

    - LOCAL: Suffix is local to Pyomo and should not be sent to or read
      from the solver.

    - EXPORT: Suffix should be sent to the solver as supplemental model
      information.

    - IMPORT: Suffix values will be returned from the solver and should
      be read from the solver output.

    - IMPORT_EXPORT: The Suffix is both an EXPORT and IMPORT suffix.

    """
    LOCAL = ...
    EXPORT = ...
    IMPORT = ...
    IMPORT_EXPORT = ...


_SuffixDataTypeDomain = ...
_SuffixDirectionDomain = ...
@ModelComponentFactory.register("Declare a container for extraneous model data")
class Suffix(ComponentMap, ActiveComponent):
    """A model suffix, representing extraneous model data"""
    LOCAL = ...
    EXPORT = ...
    IMPORT = ...
    IMPORT_EXPORT = ...
    FLOAT = ...
    INT = ...
    def __new__(cls, *args, **kwargs): # -> Self:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    @overload
    def __init__(self, *, direction=..., datatype=..., initialize=..., rule=..., name=..., doc=...) -> None:
        ...
    
    def __init__(self, **kwargs) -> None:
        ...
    
    def construct(self, data=...): # -> None:
        """
        Constructs this component, applying rule if it exists.
        """
        ...
    
    @property
    def datatype(self): # -> None:
        """Return the suffix datatype."""
        ...
    
    @datatype.setter
    def datatype(self, datatype): # -> None:
        """Set the suffix datatype."""
        ...
    
    @property
    def direction(self): # -> None:
        """Return the suffix direction."""
        ...
    
    @direction.setter
    def direction(self, direction): # -> None:
        """Set the suffix direction."""
        ...
    
    def export_enabled(self): # -> bool:
        """
        Returns True when this suffix is enabled for export to
        solvers.
        """
        ...
    
    def import_enabled(self): # -> bool:
        """
        Returns True when this suffix is enabled for import from
        solutions.
        """
        ...
    
    def update_values(self, data, expand=...): # -> None:
        """
        Updates the suffix data given a list of component,value
        tuples. Provides an improvement in efficiency over calling
        set_value on every component.
        """
        ...
    
    def set_value(self, component, value, expand=...): # -> None:
        """
        Sets the value of this suffix on the specified component.

        When expand is True (default), array components are handled by
        storing a reference and value for each index, with no
        reference being stored for the array component itself. When
        expand is False (this is the case for __setitem__), this
        behavior is disabled and a reference to the array component
        itself is kept.
        """
        ...
    
    def set_all_values(self, value): # -> None:
        """
        Sets the value of this suffix on all components.
        """
        ...
    
    def clear_value(self, component, expand=...): # -> None:
        """
        Clears suffix information for a component.
        """
        ...
    
    def clear_all_values(self): # -> None:
        """
        Clears all suffix data.
        """
        ...
    
    @deprecated('Suffix.set_datatype is replaced with the Suffix.datatype property', version='6.7.1')
    def set_datatype(self, datatype): # -> None:
        """
        Set the suffix datatype.
        """
        ...
    
    @deprecated('Suffix.get_datatype is replaced with the Suffix.datatype property', version='6.7.1')
    def get_datatype(self): # -> None:
        """
        Return the suffix datatype.
        """
        ...
    
    @deprecated('Suffix.set_direction is replaced with the Suffix.direction property', version='6.7.1')
    def set_direction(self, direction): # -> None:
        """
        Set the suffix direction.
        """
        ...
    
    @deprecated('Suffix.get_direction is replaced with the Suffix.direction property', version='6.7.1')
    def get_direction(self): # -> None:
        """
        Return the suffix direction.
        """
        ...
    
    def pprint(self, *args, **kwds): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


@disable_methods(_SUFFIX_API)
class AbstractSuffix(Suffix):
    ...


class SuffixFinder:
    def __init__(self, name, default=..., context=...) -> None:
        """This provides an efficient utility for finding suffix values on a
        (hierarchical) Pyomo model.

        Parameters
        ----------
        name: str

            Name of Suffix to search for.

        default:

            Default value to return from `.find()` if no matching Suffix
            is found.

        context: BlockData

            The root of the Block hierarchy to use when searching for
            Suffix components.  Suffixes outside this hierarchy will not
            be interrogated and components that are queried (with
            :py:meth:`find(component_data)` will return the default
            value.

        """
        ...
    
    def find(self, component_data): # -> None:
        """Find suffix value for a given component data object in model tree

        Suffixes are searched by traversing the model hierarchy in three passes:

        1. Search for a Suffix matching the specific component_data,
           starting at the `root` and descending down the tree to
           the component_data.  Return the first match found.
        2. Search for a Suffix matching the component_data's container,
           starting at the `root` and descending down the tree to
           the component_data.  Return the first match found.
        3. Search for a Suffix with key `None`, starting from the
           component_data and working up the tree to the `root`.
           Return the first match found.
        4. Return the default value

        Parameters
        ----------
        component_data: ComponentDataBase

            Component or component data object to find suffix value for.

        Returns
        -------
        The value for Suffix associated with component data if found, else None.

        """
        ...
    


