"""
This type stub file was generated by pyright.
"""

import pyomo.core.expr as EXPR
from pyomo.core import TransformationFactory
from pyomo.core.plugins.transform.hierarchy import IsomorphicTransformation

logger = ...
class VarmapVisitor(EXPR.ExpressionReplacementVisitor):
    def __init__(self, varmap) -> None:
        ...
    
    def visiting_potential_leaf(self, node): # -> tuple[Literal[True], Any] | tuple[Literal[True], _MutableSumExpression | Any] | tuple[Literal[False], None]:
        ...
    


@TransformationFactory.register("core.nonnegative_vars", doc="Create an equivalent model in which all variables lie in the nonnegative orthant.")
class NonNegativeTransformation(IsomorphicTransformation):
    """
    Creates a new, equivalent model by forcing all variables to lie in
    the nonnegative orthant by introducing auxiliary variables.
    """
    def __init__(self, **kwds) -> None:
        ...
    
    @staticmethod
    def boundsConstraintRule(lb, ub, attr, vars, model): # -> tuple[Any, int, Any]:
        """
        Produces 'lb < x^+ - x^- < ub' style constraints. Designed to
        be made a closer through functools.partial, across lb, ub, attr,
        and vars. vars is a {varname: coefficient} dictionary. attr is the
        base variable name; that is, X[1] would be referenced by

          model.__getattribute__('X')[1]

        and so attr='X', and 1 is a key of vars.

        """
        ...
    
    @staticmethod
    def noConstraint(*args): # -> None:
        ...
    
    @staticmethod
    def sumRule(attr, vars, model): # -> int:
        """
        Returns a sum expression.
        """
        ...
    
    @staticmethod
    def exprMapRule(ruleMap, model, ndx=...):
        """Rule intended to return expressions from a lookup table"""
        ...
    
    @staticmethod
    def delayedExprMapRule(ruleMap, model, ndx=...):
        """
        Rule intended to return expressions from a lookup table. Each entry
        in the lookup table is a functor that needs to be evaluated before
        returning.
        """
        ...
    


