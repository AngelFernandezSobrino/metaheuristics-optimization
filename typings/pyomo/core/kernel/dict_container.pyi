"""
This type stub file was generated by pyright.
"""

import collections.abc
from pyomo.core.kernel.homogeneous_container import IHomogeneousContainer

logger = ...
class DictContainer(IHomogeneousContainer, collections.abc.MutableMapping):
    """
    A partial implementation of the IHomogeneousContainer
    interface that provides dict-like storage functionality.

    Complete implementations need to set the _ctype property
    at the class level and initialize the remaining
    ICategorizedObject attributes during object creation. If
    using __slots__, a slot named "_data" must be included.

    Note that this implementation allows nested storage of
    other ICategorizedObjectContainer implementations that
    are defined with the same ctype.
    """
    __slots__ = ...
    _child_storage_delimiter_string = ...
    _child_storage_entry_string = ...
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def child(self, key):
        """Get the child object associated with a given
        storage key for this container.

        Raises:
            KeyError: if the argument is not a storage key
                for any children of this container
        """
        ...
    
    def children(self): # -> dict_values[Any, Any]:
        """A generator over the children of this container."""
        ...
    
    def __setitem__(self, key, item): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    


