"""
This type stub file was generated by pyright.
"""

from pyomo.core.kernel.block import block

"""
This module contains transformations for representing a
single-variate piecewise linear function using a
mixed-integer problem formulation (see [VAN10]_).

"""
logger = ...
registered_transforms = ...
class _shadow_list:
    __slots__ = ...
    def __init__(self, x) -> None:
        ...
    
    def __len__(self):
        ...
    
    def __getitem__(self, i): # -> None:
        ...
    


def piecewise(breakpoints, values, input=..., output=..., bound=..., repn=..., validate=..., simplify=..., equal_slopes_tolerance=..., require_bounded_input_variable=..., require_variable_domain_coverage=...): # -> piecewise_convex:
    """
    Models a single-variate piecewise linear function.

    This function takes a list breakpoints and function
    values describing a piecewise linear function and
    transforms this input data into a block of variables and
    constraints that enforce a piecewise linear relationship
    between an input variable and an output variable. In the
    general case, this transformation requires the use of
    discrete decision variables.

    Args:
        breakpoints (list): The list of breakpoints of the
            piecewise linear function. This can be a list of
            numbers or a list of objects that store mutable
            data (e.g., mutable parameters). If mutable data
            is used validation might need to be disabled by
            setting the :attr:`validate` keyword to
            :const:`False`. The list of breakpoints must be
            in non-decreasing order.
        values (list): The values of the piecewise linear
            function corresponding to the breakpoints.
        input: The variable constrained to be the input of
            the piecewise linear function.
        output: The variable constrained to be the output of
            the piecewise linear function.
        bound (str): The type of bound to impose on the
            output expression. Can be one of:

              - 'lb': y <= f(x)
              - 'eq': y  = f(x)
              - 'ub': y >= f(x)
        repn (str): The type of piecewise representation to
            use. Choices are shown below (+ means step
            functions are supported)

                - 'sos2': standard representation using sos2 constraints (+)
                -  'dcc': disaggregated convex combination (+)
                - 'dlog': logarithmic disaggregated convex combination (+)
                -   'cc': convex combination (+)
                -  'log': logarithmic branching convex combination (+)
                -   'mc': multiple choice
                -  'inc': incremental method (+)
        validate (bool): Indicates whether or not to perform
            validation of the input data. The default is
            :const:`True`. Validation can be performed
            manually after the piecewise object is created
            by calling the :meth:`validate`
            method. Validation should be performed any time
            the inputs are changed (e.g., when using mutable
            parameters in the breakpoints list or when the
            input variable changes).
        simplify (bool): Indicates whether or not to attempt
            to simplify the piecewise representation to
            avoid using discrete variables. This can be done
            when the feasible region for the output
            variable, with respect to the piecewise function
            and the bound type, is a convex set. Default is
            :const:`True`. Validation is required to perform
            simplification, so this keyword is ignored when
            the :attr:`validate` keyword is :attr:`False`.
        equal_slopes_tolerance (float): Tolerance used check
            if consecutive slopes are nearly equal. If any
            are found, validation will fail. Default is
            1e-6. This keyword is ignored when the
            :attr:`validate` keyword is :attr:`False`.
        require_bounded_input_variable (bool): Indicates if
            the input variable is required to have finite
            upper and lower bounds. Default is
            :const:`True`. Setting this keyword to
            :const:`False` can be used to allow general
            expressions to be used as the input in place of
            a variable. This keyword is ignored when the
            :attr:`validate` keyword is :attr:`False`.
        require_variable_domain_coverage (bool): Indicates
            if the function domain (defined by the endpoints
            of the breakpoints list) needs to cover the
            entire domain of the input variable. Default is
            :const:`True`. Ignored for any bounds of
            variables that are not finite, or when the input
            is not assigned a variable. This keyword is
            ignored when the :attr:`validate` keyword is
            :attr:`False`.

    Returns:
        TransformedPiecewiseLinearFunction: a block that
            stores any new variables, constraints, and other
            modeling objects used by the piecewise representation
    """
    ...

class PiecewiseLinearFunction:
    """A piecewise linear function

    Piecewise linear functions are defined by a list of
    breakpoints and a list function values corresponding to
    each breakpoint. The function value between breakpoints
    is implied through linear interpolation.

    Args:
        breakpoints (list): The list of function
            breakpoints.
        values (list): The list of function values (one for
            each breakpoint).
        validate (bool): Indicates whether or not to perform
            validation of the input data. The default is
            :const:`True`. Validation can be performed
            manually after the piecewise object is created
            by calling the :meth:`validate`
            method. Validation should be performed any time
            the inputs are changed (e.g., when using mutable
            parameters in the breakpoints list).
        **kwds: Additional keywords are passed to the
            :meth:`validate` method when the :attr:`validate`
            keyword is :const:`True`; otherwise, they are
            ignored.
    """
    __slots__ = ...
    def __init__(self, breakpoints, values, validate=..., **kwds) -> None:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        """Required for older versions of the pickle
        protocol since this class uses __slots__"""
        ...
    
    def __setstate__(self, state): # -> None:
        """Required for older versions of the pickle
        protocol since this class uses __slots__"""
        ...
    
    def validate(self, equal_slopes_tolerance=...): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints and values
        lists (e.g., that the list of breakpoints is
        nondecreasing).

        Args:
            equal_slopes_tolerance (float): Tolerance used
                check if consecutive slopes are nearly
                equal. If any are found, validation will
                fail. Default is 1e-6.

        Returns:
            int:
                a function characterization code (see
                :func:`util.characterize_function`)

        Raises:
            PiecewiseValidationError: if validation fails
        """
        ...
    
    @property
    def breakpoints(self): # -> Any | tuple[Any, ...]:
        """The set of breakpoints used to defined this function"""
        ...
    
    @property
    def values(self): # -> Any | tuple[Any, ...]:
        """The set of values used to defined this function"""
        ...
    
    def __call__(self, x): # -> float:
        """Evaluates the piecewise linear function at the
        given point using interpolation. Note that step functions are
        assumed lower-semicontinuous."""
        ...
    


class TransformedPiecewiseLinearFunction(block):
    """Base class for transformed piecewise linear functions

    A transformed piecewise linear functions is a block of
    variables and constraints that enforce a piecewise
    linear relationship between an input variable and an
    output variable.

    Args:
        f (:class:`PiecewiseLinearFunction`): The piecewise
            linear function to transform.
        input: The variable constrained to be the input of
            the piecewise linear function.
        output: The variable constrained to be the output of
            the piecewise linear function.
        bound (str): The type of bound to impose on the
            output expression. Can be one of:

              - 'lb': y <= f(x)
              - 'eq': y  = f(x)
              - 'ub': y >= f(x)
        validate (bool): Indicates whether or not to perform
            validation of the input data. The default is
            :const:`True`. Validation can be performed
            manually after the piecewise object is created
            by calling the :meth:`validate`
            method. Validation should be performed any time
            the inputs are changed (e.g., when using mutable
            parameters in the breakpoints list or when the
            input variable changes).
        **kwds: Additional keywords are passed to the
            :meth:`validate` method when the :attr:`validate`
            keyword is :const:`True`; otherwise, they are
            ignored.
    """
    def __init__(self, f, input=..., output=..., bound=..., validate=..., **kwds) -> None:
        ...
    
    @property
    def input(self):
        """The expression that stores the input to the
        piecewise function. The returned object can be
        updated by assigning to its :attr:`expr`
        attribute."""
        ...
    
    @property
    def output(self):
        """The expression that stores the output of the
        piecewise function. The returned object can be
        updated by assigning to its :attr:`expr`
        attribute."""
        ...
    
    @property
    def bound(self): # -> str:
        """The bound type assigned to the piecewise
        relationship ('lb','ub','eq')."""
        ...
    
    def validate(self, equal_slopes_tolerance=..., require_bounded_input_variable=..., require_variable_domain_coverage=...): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints, values, and
        input variable (e.g., that the list of breakpoints
        is nondecreasing).

        Args:
            equal_slopes_tolerance (float): Tolerance used
                check if consecutive slopes are nearly
                equal. If any are found, validation will
                fail. Default is 1e-6.
            require_bounded_input_variable (bool): Indicates
                if the input variable is required to have
                finite upper and lower bounds. Default is
                :const:`True`. Setting this keyword to
                :const:`False` can be used to allow general
                expressions to be used as the input in place
                of a variable.
            require_variable_domain_coverage (bool):
                Indicates if the function domain (defined by
                the endpoints of the breakpoints list) needs
                to cover the entire domain of the input
                variable. Default is :const:`True`. Ignored
                for any bounds of variables that are not
                finite, or when the input is not assigned a
                variable.

        Returns:
            int:
                a function characterization code (see
                :func:`util.characterize_function`)

        Raises:
            PiecewiseValidationError: if validation fails
        """
        ...
    
    @property
    def breakpoints(self): # -> tuple[Any, ...]:
        """The set of breakpoints used to defined this function"""
        ...
    
    @property
    def values(self): # -> tuple[Any, ...]:
        """The set of values used to defined this function"""
        ...
    
    def __call__(self, x): # -> float:
        """Evaluates the piecewise linear function at the
        given point using interpolation"""
        ...
    


class piecewise_convex(TransformedPiecewiseLinearFunction):
    """Simple convex piecewise representation

    Expresses a piecewise linear function with a convex
    feasible region for the output variable using a simple
    collection of linear constraints.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def validate(self, **kwds): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints, values, and
        input variable (e.g., that the list of breakpoints
        is nondecreasing).

        See base class documentation for keyword
        descriptions.
        """
        ...
    


class piecewise_sos2(TransformedPiecewiseLinearFunction):
    """Discrete SOS2 piecewise representation

    Expresses a piecewise linear function using
    the SOS2 formulation.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def validate(self, **kwds): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints, values, and
        input variable (e.g., that the list of breakpoints
        is nondecreasing).

        See base class documentation for keyword
        descriptions.
        """
        ...
    


class piecewise_dcc(TransformedPiecewiseLinearFunction):
    """Discrete DCC piecewise representation

    Expresses a piecewise linear function using
    the DCC formulation.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def validate(self, **kwds): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints, values, and
        input variable (e.g., that the list of breakpoints
        is nondecreasing).

        See base class documentation for keyword
        descriptions.
        """
        ...
    


class piecewise_cc(TransformedPiecewiseLinearFunction):
    """Discrete CC piecewise representation

    Expresses a piecewise linear function using
    the CC formulation.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def validate(self, **kwds): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints, values, and
        input variable (e.g., that the list of breakpoints
        is nondecreasing).

        See base class documentation for keyword
        descriptions.
        """
        ...
    


class piecewise_mc(TransformedPiecewiseLinearFunction):
    """Discrete MC piecewise representation

    Expresses a piecewise linear function using
    the MC formulation.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def validate(self, **kwds): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints, values, and
        input variable (e.g., that the list of breakpoints
        is nondecreasing).

        See base class documentation for keyword
        descriptions.
        """
        ...
    


class piecewise_inc(TransformedPiecewiseLinearFunction):
    """Discrete INC piecewise representation

    Expresses a piecewise linear function using
    the INC formulation.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def validate(self, **kwds): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints, values, and
        input variable (e.g., that the list of breakpoints
        is nondecreasing).

        See base class documentation for keyword
        descriptions.
        """
        ...
    


class piecewise_dlog(TransformedPiecewiseLinearFunction):
    """Discrete DLOG piecewise representation

    Expresses a piecewise linear function using the DLOG
    formulation. This formulation uses logarithmic number of
    discrete variables in terms of number of breakpoints.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def validate(self, **kwds): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints, values, and
        input variable (e.g., that the list of breakpoints
        is nondecreasing).

        See base class documentation for keyword
        descriptions.
        """
        ...
    


class piecewise_log(TransformedPiecewiseLinearFunction):
    """Discrete LOG piecewise representation

    Expresses a piecewise linear function using the LOG
    formulation. This formulation uses logarithmic number of
    discrete variables in terms of number of breakpoints.
    """
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def validate(self, **kwds): # -> Any:
        """
        Validate this piecewise linear function by verifying
        various properties of the breakpoints, values, and
        input variable (e.g., that the list of breakpoints
        is nondecreasing).

        See base class documentation for keyword
        descriptions.
        """
        ...
    


