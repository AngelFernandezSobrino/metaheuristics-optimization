"""
This type stub file was generated by pyright.
"""

from pyomo.common.autoslots import AutoSlots

class _no_ctype:
    """The default argument for methods that accept a ctype."""
    ...


_convert_ctype = ...
_kernel_ctype_backmap = ...
class ICategorizedObject(AutoSlots.Mixin):
    """
    Interface for objects that maintain a weak reference to
    a parent storage object and have a category type.

    This class is abstract. It assumes any derived class
    declares the attributes below with or without slots:

    Attributes:
        _ctype: Stores the object's category type, which
            should be some class derived from
            ICategorizedObject. This attribute may be
            declared at the class level.
        _parent: Stores a weak reference to the object's
            parent container or :const:`None`.
        _storage_key: Stores key this object can be accessed
            with through its parent container.
        _active (bool): Stores the active status of this
            object.
    """
    __slots__ = ...
    __autoslot_mappers__ = ...
    _is_container = ...
    _is_heterogeneous_container = ...
    @property
    def ctype(self):
        """The object's category type."""
        ...
    
    @property
    def parent(self): # -> None:
        """The object's parent (possibly None)."""
        ...
    
    @property
    def storage_key(self):
        """The object's storage key within its parent"""
        ...
    
    @property
    def active(self):
        """The active status of this object."""
        ...
    
    @active.setter
    def active(self, value):
        ...
    
    def activate(self): # -> None:
        """Activate this object."""
        ...
    
    def deactivate(self): # -> None:
        """Deactivate this object."""
        ...
    
    def getname(self, fully_qualified=..., name_buffer=..., convert=..., relative_to=...): # -> None:
        """
        Dynamically generates a name for this object.

        Args:
            fully_qualified (bool): Generate a full name by
                iterating through all ancestor containers.
                Default is :const:`False`.
            convert (function): A function that converts a
                storage key into a string
                representation. Default is the built-in
                function str.
            relative_to (object): When generating a fully
                qualified name, generate the name relative
                to this block.

        Returns:
            If a parent exists, this method returns a string
            representing the name of the object in the
            context of its parent; otherwise (if no parent
            exists), this method returns :const:`None`.
        """
        ...
    
    @property
    def name(self): # -> None:
        """The object's fully qualified name. Alias for
        `obj.getname(fully_qualified=True)`."""
        ...
    
    @property
    def local_name(self): # -> None:
        """The object's local name within the context of its
        parent. Alias for
        `obj.getname(fully_qualified=False)`."""
        ...
    
    def __str__(self) -> str:
        """Convert this object to a string by first
        attempting to generate its fully qualified name. If
        the object does not have a name (because it does not
        have a parent, then a string containing the class
        name is returned."""
        ...
    
    def clone(self): # -> Self:
        """
        Returns a copy of this object with the parent
        pointer set to :const:`None`.

        A clone is almost equivalent to deepcopy except that
        any categorized objects encountered that are not
        descendents of this object will reference the same
        object on the clone.
        """
        ...
    
    def __deepcopy__(self, memo): # -> Self:
        ...
    


class ICategorizedObjectContainer(ICategorizedObject):
    """
    Interface for categorized containers of categorized
    objects.
    """
    _is_container = ...
    _child_storage_delimiter_string = ...
    _child_storage_entry_string = ...
    __slots__ = ...
    def activate(self, shallow=...): # -> None:
        """Activate this container."""
        ...
    
    def deactivate(self, shallow=...): # -> None:
        """Deactivate this container."""
        ...
    
    def child(self, *args, **kwds):
        """Returns a child of this container given a storage
        key."""
        ...
    
    def children(self, *args, **kwds):
        """A generator over the children of this container."""
        ...
    
    def components(self, *args, **kwds):
        """A generator over the set of components stored
        under this container."""
        ...
    


