"""
This type stub file was generated by pyright.
"""

from pyomo.core.kernel.heterogeneous_container import IHeterogeneousContainer

logger = ...
class IBlock(IHeterogeneousContainer):
    """A generalized container that can store objects of
    any category type as attributes.
    """
    __slots__ = ...
    _child_storage_delimiter_string = ...
    _child_storage_entry_string = ...
    def child(self, key): # -> Any:
        """Get the child object associated with a given
        storage key for this container.

        Raises:
            KeyError: if the argument is not a storage key
                for any children of this container
        """
        ...
    


class block(IBlock):
    """A generalized container for defining hierarchical
    models by adding modeling components as attributes.

    Examples:
        >>> import pyomo.kernel as pmo
        >>> model = pmo.block()
        >>> model.x = pmo.variable()
        >>> model.c = pmo.constraint(model.x >= 1)
        >>> model.o = pmo.objective(model.x)
    """
    _ctype = IBlock
    _lbs_count = ...
    _block_reserved_words = ...
    def __init__(self) -> None:
        ...
    
    def child_ctypes(self): # -> tuple[()] | tuple[Any, ...] | tuple[Any]:
        """Returns the set of child object category types
        stored in this container."""
        ...
    
    def children(self, ctype=...): # -> Generator[Any, Any, None]:
        """Iterate over the children of this block.

        Args:
            ctype: Indicates the category of children to
                include. The default value indicates that
                all categories should be included.

        Returns:
            iterator of child objects
        """
        ...
    
    def __setattr__(self, name, obj): # -> None:
        ...
    
    def __delattr__(self, name): # -> None:
        ...
    
    def write(self, filename, format=..., _solver_capability=..., _called_by_solver=..., **kwds): # -> int:
        """
        Write the model to a file, with a given format.

        Args:
            filename (str): The name of the file to write.
            format: The file format to use. If this is not
                specified, the file format will be inferred
                from the filename suffix.
            **kwds: Additional keyword options passed to the
                model writer.

        Returns:
            a :class:`SymbolMap`
        """
        ...
    
    def load_solution(self, solution, allow_consistent_values_for_fixed_vars=..., comparison_tolerance_for_fixed_vars=...): # -> None:
        """
        Load a solution.

        Args:
            solution: A :class:`pyomo.opt.Solution` object with a
                symbol map. Optionally, the solution can be tagged
                with a default variable value (e.g., 0) that will be
                applied to those variables in the symbol map that do
                not have a value in the solution.
            allow_consistent_values_for_fixed_vars:
                Indicates whether a solution can specify
                consistent values for variables that are
                fixed.
            comparison_tolerance_for_fixed_vars: The
                tolerance used to define whether or not a
                value in the solution is consistent with the
                value of a fixed variable.
        """
        ...
    


