"""
This type stub file was generated by pyright.
"""

from pyomo.core.kernel.constraint import IConstraint, constraint_tuple

_noarg = ...
_pos_inf = ...
_neg_inf = ...
class _MatrixConstraintData(IConstraint):
    """
    A placeholder object for linear constraints in a
    matrix_constraint container. A user should not
    directly instantiate this class.
    """
    _ctype = IConstraint
    _linear_canonical_form = ...
    __slots__ = ...
    def __init__(self, index) -> None:
        ...
    
    @property
    def index(self): # -> Any:
        """The row index of this constraint in the parent matrix"""
        ...
    
    @property
    def terms(self): # -> Generator[tuple[Any, Any], Any, None]:
        """An iterator over the terms in the body of this
        constraint as (variable, coefficient) tuples"""
        ...
    
    def __call__(self, exception=...): # -> int | None:
        ...
    
    @property
    def body(self): # -> int:
        """The body of the constraint"""
        ...
    
    @property
    def lower(self):
        """The expression for the lower bound of the constraint"""
        ...
    
    @lower.setter
    def lower(self, lb): # -> None:
        ...
    
    @property
    def upper(self):
        """The expression for the upper bound of the constraint"""
        ...
    
    @upper.setter
    def upper(self, ub): # -> None:
        ...
    
    @property
    def lb(self): # -> None:
        """The value of the lower bound of the constraint"""
        ...
    
    @lb.setter
    def lb(self, lb): # -> None:
        ...
    
    @property
    def ub(self): # -> None:
        """The value of the upper bound of the constraint"""
        ...
    
    @ub.setter
    def ub(self, ub): # -> None:
        ...
    
    @property
    def rhs(self):
        """The right-hand side of the constraint. This
        property can only be read when the equality property
        is :const:`True`. Assigning to this property
        implicitly sets the equality property to
        :const:`True`."""
        ...
    
    @rhs.setter
    def rhs(self, rhs): # -> None:
        ...
    
    @property
    def bounds(self): # -> tuple[Any, Any]:
        """The bounds of the constraint as a tuple (lb, ub)"""
        ...
    
    @bounds.setter
    def bounds(self, bounds_tuple): # -> None:
        ...
    
    @property
    def equality(self):
        """Returns :const:`True` when this is an equality
        constraint.

        Disable equality by assigning
        :const:`False`. Equality can only be activated by
        assigning a value to the .rhs property."""
        ...
    
    @equality.setter
    def equality(self, equality): # -> None:
        ...
    
    def canonical_form(self, compute_values=...): # -> StandardRepn:
        """Build a canonical representation of the body of
        this constraints"""
        ...
    


class matrix_constraint(constraint_tuple):
    """
    A container for constraints of the form lb <= Ax <= ub.

    Args:
        A: A scipy sparse matrix or 2D numpy array (always
            copied)
        lb: A scalar or array with the same number of rows
            as A that defines the lower bound of the
            constraints
        ub: A scalar or array with the same number of rows
            as A that defines the upper bound of the
            constraints
        rhs: A scalar or array with the same number of rows
            as A that defines the right-hand side of the
            constraints (implies equality constraints)
        x: A list with the same number of columns as A that
            stores the variable associated with each column
        sparse: Indicates whether or not sparse storage (CSR
            format) should be used to store A. Default is
            :const:`True`.
    """
    __slots__ = ...
    def __init__(self, A, lb=..., ub=..., rhs=..., x=..., sparse=...) -> None:
        ...
    
    @property
    def sparse(self): # -> bool:
        """Boolean indicating whether or not the underlying
        matrix uses sparse storage"""
        ...
    
    @property
    def A(self): # -> Any:
        """A read-only view of the constraint matrix"""
        ...
    
    @property
    def x(self): # -> tuple[Any, ...] | None:
        """The list of variables associated with the columns
        of the constraint matrix"""
        ...
    
    @x.setter
    def x(self, x): # -> None:
        ...
    
    @property
    def lb(self): # -> Any:
        """The array of constraint lower bounds"""
        ...
    
    @lb.setter
    def lb(self, lb): # -> None:
        ...
    
    @property
    def ub(self): # -> Any:
        """The array of constraint upper bounds"""
        ...
    
    @ub.setter
    def ub(self, ub): # -> None:
        ...
    
    @property
    def rhs(self): # -> Any:
        """The array of constraint right-hand sides. Can be
        set to a scalar or a numpy array of the same
        dimension. This property can only be read when the
        equality property is :const:`True` on every
        index. Assigning to this property implicitly sets
        the equality property to :const:`True` on every
        index."""
        ...
    
    @rhs.setter
    def rhs(self, rhs): # -> None:
        ...
    
    @property
    def equality(self): # -> Any:
        """The array of boolean entries indicating the
        indices that are equality constraints"""
        ...
    
    @equality.setter
    def equality(self, equality): # -> None:
        ...
    
    def __call__(self, exception=...): # -> Any | None:
        """Compute the value of the body of this constraint"""
        ...
    
    @property
    def lslack(self, body=...): # -> Any | None:
        """Lower slack (body - lb)"""
        ...
    
    @property
    def uslack(self, body=...): # -> Any | None:
        """Upper slack (ub - body)"""
        ...
    
    @property
    def slack(self): # -> Any | None:
        """min(lslack, uslack)"""
        ...
    


