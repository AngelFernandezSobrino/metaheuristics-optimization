"""
This type stub file was generated by pyright.
"""

from pyomo.common.collections import ComponentMap
from pyomo.common.deprecation import deprecated
from pyomo.core.kernel.base import ICategorizedObject

logger = ...
_noarg = ...
class ISuffix(ComponentMap, ICategorizedObject):
    """The interface for suffixes."""
    __slots__ = ...
    direction = ...
    datatype = ...
    def __str__(self) -> str:
        ...
    


class suffix(ISuffix):
    """A container for storing extraneous model data that
    can be imported to or exported from a solver."""
    _ctype = ISuffix
    __slots__ = ...
    LOCAL = ...
    EXPORT = ...
    IMPORT = ...
    IMPORT_EXPORT = ...
    _directions = ...
    FLOAT = ...
    INT = ...
    _datatypes = ...
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def export_enabled(self): # -> bool:
        """Returns :const:`True` when this suffix is enabled
        for export to solvers."""
        ...
    
    def import_enabled(self): # -> bool:
        """Returns :const:`True` when this suffix is enabled
        for import from solutions."""
        ...
    
    @property
    def datatype(self): # -> None:
        """Return the suffix datatype."""
        ...
    
    @datatype.setter
    def datatype(self, datatype): # -> None:
        """Set the suffix datatype."""
        ...
    
    @property
    def direction(self): # -> None:
        """Return the suffix direction."""
        ...
    
    @direction.setter
    def direction(self, direction): # -> None:
        """Set the suffix direction."""
        ...
    
    @deprecated("suffix.set_all_values will be removed in the future.", version='5.3')
    def set_all_values(self, value): # -> None:
        ...
    
    @deprecated("suffix.clear_value will be removed in the future. " "Use 'del suffix[key]' instead.", version='5.3')
    def clear_value(self, component): # -> None:
        ...
    
    @deprecated("suffix.clear_all_values is replaced with suffix.clear", version='5.3')
    def clear_all_values(self): # -> None:
        ...
    
    @deprecated("suffix.get_datatype is replaced with the property suffix.datatype", version='5.3')
    def get_datatype(self): # -> None:
        ...
    
    @deprecated("suffix.set_datatype is replaced with the property setter suffix.datatype", version='5.3')
    def set_datatype(self, datatype): # -> None:
        ...
    
    @deprecated("suffix.get_direction is replaced with the property suffix.direction", version='5.3')
    def get_direction(self): # -> None:
        ...
    
    @deprecated("suffix.set_direction is replaced with the property setter suffix.direction", version='5.3')
    def set_direction(self, direction): # -> None:
        ...
    


def export_suffix_generator(blk, datatype=..., active=..., descend_into=...): # -> Generator[Any, Any, None]:
    """
    Generates an efficient traversal of all suffixes that
    have been declared for exporting data.

    Args:
        blk: A block object.
        datatype: Restricts the suffixes included in the
            returned generator to those matching the
            provided suffix datatype.
        active (:const:`True`/:const:`None`): Controls
            whether or not to filter the iteration to
            include only the active part of the storage
            tree. The default is :const:`True`. Setting this
            keyword to :const:`None` causes the active
            status of objects to be ignored.
        descend_into (bool, function): Indicates whether or
            not to descend into a heterogeneous
            container. Default is True, which is equivalent
            to `lambda x: True`, meaning all heterogeneous
            containers will be descended into.

    Returns:
        iterator of suffixes
    """
    ...

def import_suffix_generator(blk, datatype=..., active=..., descend_into=...): # -> Generator[Any, Any, None]:
    """
    Generates an efficient traversal of all suffixes that
    have been declared for importing data.

    Args:
        blk: A block object.
        datatype: Restricts the suffixes included in the
            returned generator to those matching the
            provided suffix datatype.
        active (:const:`True`/:const:`None`): Controls
            whether or not to filter the iteration to
            include only the active part of the storage
            tree. The default is :const:`True`. Setting this
            keyword to :const:`None` causes the active
            status of objects to be ignored.
        descend_into (bool, function): Indicates whether or
            not to descend into a heterogeneous
            container. Default is True, which is equivalent
            to `lambda x: True`, meaning all heterogeneous
            containers will be descended into.

    Returns:
        iterator of suffixes
    """
    ...

def local_suffix_generator(blk, datatype=..., active=..., descend_into=...): # -> Generator[Any, Any, None]:
    """
    Generates an efficient traversal of all suffixes that
    have been declared local data storage.

    Args:
        blk: A block object.
        datatype: Restricts the suffixes included in the
            returned generator to those matching the
            provided suffix datatype.
        active (:const:`True`/:const:`None`): Controls
            whether or not to filter the iteration to
            include only the active part of the storage
            tree. The default is :const:`True`. Setting this
            keyword to :const:`None` causes the active
            status of objects to be ignored.
        descend_into (bool, function): Indicates whether or
            not to descend into a heterogeneous
            container. Default is True, which is equivalent
            to `lambda x: True`, meaning all heterogeneous
            containers will be descended into.

    Returns:
        iterator of suffixes
    """
    ...

def suffix_generator(blk, datatype=..., active=..., descend_into=...): # -> Generator[Any, Any, None]:
    """
    Generates an efficient traversal of all suffixes that
    have been declared.

    Args:
        blk: A block object.
        datatype: Restricts the suffixes included in the
            returned generator to those matching the
            provided suffix datatype.
        active (:const:`True`/:const:`None`): Controls
            whether or not to filter the iteration to
            include only the active part of the storage
            tree. The default is :const:`True`. Setting this
            keyword to :const:`None` causes the active
            status of objects to be ignored.
        descend_into (bool, function): Indicates whether or
            not to descend into a heterogeneous
            container. Default is True, which is equivalent
            to `lambda x: True`, meaning all heterogeneous
            containers will be descended into.

    Returns:
        iterator of suffixes
    """
    ...

