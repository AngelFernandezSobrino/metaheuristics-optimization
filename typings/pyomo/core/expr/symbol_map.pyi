"""
This type stub file was generated by pyright.
"""

class SymbolMap:
    """
    A class for tracking assigned labels for modeling components.

    Symbol maps are used, for example, when writing problem files for
    input to an optimizer.

    Warning:
        A symbol map should never be pickled.  This class is
        typically constructed by solvers and writers, and it may be
        owned by models.

    Note:
        We should change the API to not use camelcase.

    Attributes
    ----------
    byObject : dict
        maps (object id) to (string label)
    bySymbol : dict
        maps (string label) to (object)
    aliases : dict
        maps (string label) to (object)
    default_labeler:
        used to compute a string label from an object
    """
    def __init__(self, labeler=...) -> None:
        ...
    
    class UnknownSymbol:
        ...
    
    
    def __getstate__(self): # -> tuple[Any | dict[Any, Any], Any | dict[Any, Any], Any | None]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def addSymbol(self, obj, symb): # -> None:
        """
        Add a symbol for a given object

        This method assumes that objects and symbol names will not conflict.
        """
        ...
    
    def addSymbols(self, obj_symbol_tuples): # -> None:
        """
        Add (object, symbol) tuples from an iterable object.

        This method assumes that objects and symbol names will not conflict.
        """
        ...
    
    def createSymbol(self, obj, labeler=..., *args): # -> str:
        """
        Create a symbol for an object with a given labeler.  No
        error checking is done to ensure that the generated symbol
        name is unique.
        """
        ...
    
    def createSymbols(self, objs, labeler=..., *args): # -> None:
        """
        Create a symbol for iterable objects with a given labeler.  No
        error checking is done to ensure that the generated symbol
        names are unique.
        """
        ...
    
    def getSymbol(self, obj, labeler=..., *args): # -> str:
        """
        Return the symbol for an object.  If it has not already been cached
        in the symbol map, then create it.
        """
        ...
    
    def alias(self, obj, name): # -> None:
        """
        Create an alias for an object.  An aliases are symbols that
        do not have a one-to-one correspondence with objects.
        """
        ...
    
    def getObject(self, symbol): # -> type[UnknownSymbol]:
        """
        Return the object corresponding to a symbol
        """
        ...
    
    def removeSymbol(self, obj): # -> None:
        ...
    


