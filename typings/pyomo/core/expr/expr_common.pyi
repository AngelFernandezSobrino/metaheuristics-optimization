"""
This type stub file was generated by pyright.
"""

from contextlib import nullcontext
from pyomo.common import enums
from pyomo.common.deprecation import deprecated

TO_STRING_VERBOSE = ...
_eq = ...
_le = ...
_lt = ...
_and = ...
_or = ...
_inv = ...
_equiv = ...
_xor = ...
_impl = ...
class Mode(enums.IntEnum):
    coopr_trees = ...
    coopr3_trees = ...
    pyomo4_trees = ...
    pyomo5_trees = ...
    pyomo6_trees = ...
    CURRENT = ...


_mode = ...
class OperatorAssociativity(enums.IntEnum):
    """Enum for indicating the associativity of an operator.

    LEFT_TO_RIGHT(1) if this operator is left-to-right associative or
    RIGHT_TO_LEFT(-1) if it is right-to-left associative.  Any other
    values will be interpreted as "not associative" (implying any
    arguments that are at this operator's PRECEDENCE will be enclosed
    in parens).

    """
    RIGHT_TO_LEFT = ...
    NON_ASSOCIATIVE = ...
    LEFT_TO_RIGHT = ...


class ExpressionType(enums.Enum):
    NUMERIC = ...
    RELATIONAL = ...
    LOGICAL = ...


@deprecated("""The clone counter has been removed and will always return 0.

Beginning with Pyomo5 expressions, expression cloning (detangling) no
longer occurs automatically within expression generation.  As a result,
the 'clone counter' has lost its utility and is no longer supported.
This context manager will always report 0.""", version='6.4.3')
class clone_counter(nullcontext):
    """Context manager for counting cloning events.

    This context manager counts the number of times that the
    :func:`clone_expression <pyomo.core.expr.current.clone_expression>`
    function is executed.
    """
    _count = ...
    def __init__(self) -> None:
        ...
    
    @property
    def count(self): # -> int:
        """A property that returns the clone count value."""
        ...
    


