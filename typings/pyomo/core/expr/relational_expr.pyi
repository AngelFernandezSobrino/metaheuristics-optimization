"""
This type stub file was generated by pyright.
"""

from pyomo.common.deprecation import deprecated
from .base import ExpressionBase
from .boolean_value import BooleanValue

class RelationalExpression(ExpressionBase, BooleanValue):
    __slots__ = ...
    EXPRESSION_SYSTEM = ...
    def __init__(self, args) -> None:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    @property
    def args(self):
        """
        Return the child nodes

        Returns: Either a list or tuple (depending on the node storage
            model) containing only the child nodes of this node
        """
        ...
    
    @deprecated("is_relational() is deprecated in favor of " "is_expression_type(ExpressionType.RELATIONAL)", version='6.4.3')
    def is_relational(self): # -> Literal[True]:
        ...
    
    def is_potentially_variable(self): # -> bool:
        ...
    
    def polynomial_degree(self):
        """
        Return the polynomial degree of the expression.

        Returns:
            A non-negative integer that is the polynomial
            degree if the expression is polynomial, or :const:`None` otherwise.
        """
        ...
    
    def __eq__(self, other) -> bool:
        """
        Equal to operator

        This method is called when Python processes statements of the form::

            self == other
            other == self
        """
        ...
    
    def __lt__(self, other) -> bool:
        """
        Less than operator

        This method is called when Python processes statements of the form::

            self < other
            other > self
        """
        ...
    
    def __gt__(self, other) -> bool:
        """
        Greater than operator

        This method is called when Python processes statements of the form::

            self > other
            other < self
        """
        ...
    
    def __le__(self, other) -> bool:
        """
        Less than or equal operator

        This method is called when Python processes statements of the form::

            self <= other
            other >= self
        """
        ...
    
    def __ge__(self, other) -> bool:
        """
        Greater than or equal operator

        This method is called when Python processes statements of the form::

            self >= other
            other <= self
        """
        ...
    


class RangedExpression(RelationalExpression):
    """
    Ranged expressions, which define relations with a lower and upper bound::

        x < y < z
        x <= y <= z

    args:
        args (tuple): child nodes
        strict (tuple): flags that indicate whether the inequalities are strict
    """
    __slots__ = ...
    PRECEDENCE = ...
    STRICT = ...
    def __init__(self, args, strict) -> None:
        ...
    
    def nargs(self): # -> Literal[3]:
        ...
    
    def create_node_with_local_data(self, args): # -> Self:
        ...
    
    @property
    def strict(self): # -> tuple[bool, bool]:
        ...
    


class InequalityExpression(RelationalExpression):
    """
    Inequality expressions, which define less-than or
    less-than-or-equal relations::

        x < y
        x <= y

    args:
        args (tuple): child nodes
        strict (bool): a flag that indicates whether the inequality is strict
    """
    __slots__ = ...
    PRECEDENCE = ...
    def __init__(self, args, strict) -> None:
        ...
    
    def nargs(self): # -> Literal[2]:
        ...
    
    def create_node_with_local_data(self, args): # -> Self:
        ...
    
    @property
    def strict(self): # -> Any:
        ...
    


def inequality(lower=..., body=..., upper=..., strict=...): # -> InequalityExpression | RangedExpression:
    """
    A utility function that can be used to declare inequality and
    ranged inequality expressions.  The expression::

        inequality(2, model.x)

    is equivalent to the expression::

        2 <= model.x

    The expression::

        inequality(2, model.x, 3)

    is equivalent to the expression::

        2 <= model.x <= 3

    .. note:: This ranged inequality syntax is deprecated in Pyomo.
        This function provides a mechanism for expressing
        ranged inequalities without chained inequalities.

    args:
        lower: an expression defines a lower bound
        body: an expression defines the body of a ranged constraint
        upper: an expression defines an upper bound
        strict (bool): A boolean value that indicates whether the inequality
            is strict.  Default is :const:`False`.

    Returns:
        A relational expression.  The expression is an inequality
        if any of the values :attr:`lower`, :attr:`body` or
        :attr:`upper` is :const:`None`.  Otherwise, the expression
        is a ranged inequality.
    """
    ...

class EqualityExpression(RelationalExpression):
    """
    Equality expression::

        x == y
    """
    __slots__ = ...
    PRECEDENCE = ...
    def nargs(self): # -> Literal[2]:
        ...
    
    def __bool__(self): # -> bool:
        ...
    


class NotEqualExpression(RelationalExpression):
    """
    Not-equal expression::

        x != y
    """
    __slots__ = ...
    def nargs(self): # -> Literal[2]:
        ...
    
    def __bool__(self): # -> bool:
        ...
    


_relational_op = ...
def tuple_to_relational_expr(args): # -> EqualityExpression | InequalityExpression | RangedExpression:
    ...

