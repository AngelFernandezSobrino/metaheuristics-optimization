"""
This type stub file was generated by pyright.
"""

logger = ...
def prod(terms): # -> Literal[1]:
    """
    A utility function to compute the product of a list of terms.

    Args:
        terms (list): A list of terms that are multiplied together.

    Returns:
        The value of the product, which may be a Pyomo expression object.
    """
    ...

def quicksum(args, start=..., linear=...): # -> int:
    """A utility function to compute a sum of Pyomo expressions.

    The behavior of :func:`quicksum` is similar to the builtin
    :func:`sum` function, but this function can avoid the generation and
    disposal of intermediate objects, and thus is slightly more
    performant.

    Parameters
    ----------
    args: Iterable
        A generator for terms in the sum.

    start: Any
        A value that initializes the sum.  If this value is not a
        numeric constant, then the += operator is used to add terms to
        this object.  Defaults to 0.

    linear: bool
        DEPRECATED: the linearity of the resulting expression is
        determined automatically.  This option is ignored.

    Returns
    -------
    The value of the sum, which may be a Pyomo expression object.

    """
    ...

def sum_product(*args, **kwds): # -> int:
    """
    A utility function to compute a generalized dot product.

    This function accepts one or more components that provide terms
    that are multiplied together.  These products are added together
    to form a sum.

    Args:
        *args: Variable length argument list of generators that
            create terms in the summation.
        **kwds: Arbitrary keyword arguments.

    Keyword Args:
        index: A set that is used to index the components used to
            create the terms
        denom: A component or tuple of components that are used to
            create the denominator of the terms
        start: The initial value used in the sum

    Returns:
        The value of the sum.
    """
    ...

dot_product = ...
summation = ...
def sequence(*args): # -> range:
    """
    sequence([start,] stop[, step]) -> generator for a list of integers

    Return a generator that containing an arithmetic
    progression of integers.

       - ``sequence(i, j)`` returns ``[i, i+1, i+2, ..., j]``;
       - start defaults to 1.
       - step specifies the increment (or decrement)

    For example, ``sequence(4)`` returns ``[1, 2, 3, 4]``.
    """
    ...

def target_list(x): # -> list[ComponentBase] | list[Any]:
    ...

