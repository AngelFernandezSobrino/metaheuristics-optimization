"""
This type stub file was generated by pyright.
"""

from pyomo.opt.base import OptSolver
from pyomo.opt.base.solvers import SolverFactory
from pyomo.opt.solver import ILMLicensedSystemCallSolver
from pyomo.solvers.plugins.solvers.ASL import ASL

logger = ...
GUROBI_RUN = ...
@SolverFactory.register('gurobi', doc='The GUROBI LP/MIP solver')
class GUROBI(OptSolver):
    """The GUROBI LP/MIP solver"""
    def __new__(cls, *args, **kwds): # -> None:
        ...
    


@SolverFactory.register('_gurobi_nl', doc='NL interface to the Gurobi solver')
class GUROBINL(ASL):
    """NL interface to gurobi_ampl."""
    def license_is_valid(self): # -> Any | Literal[False]:
        ...
    


@SolverFactory.register('_gurobi_shell', doc='Shell interface to the GUROBI LP/MIP solver')
class GUROBISHELL(ILMLicensedSystemCallSolver):
    """Shell interface to the GUROBI LP/MIP solver"""
    _solver_info_cache = ...
    def __init__(self, **kwds) -> None:
        ...
    
    def license_is_valid(self): # -> bool:
        """
        Runs a check for a valid Gurobi license using the
        given executable (default is 'gurobi_cl'). All
        output is hidden. If the test fails for any reason
        (including the executable being invalid), then this
        function will return False.
        """
        ...
    
    def warm_start_capable(self): # -> Literal[True]:
        ...
    
    def create_command_line(self, executable, problem_files): # -> Bunch:
        ...
    
    def process_soln_file(self, results):
        ...
    


@SolverFactory.register('_gurobi_file', doc='LP/MPS file-based direct interface to the GUROBI LP/MIP solver')
class GUROBIFILE(GUROBISHELL):
    """Direct LP/MPS file-based interface to the GUROBI LP/MIP solver"""
    def available(self, exception_flag=...): # -> bool:
        ...
    
    def license_is_valid(self): # -> bool:
        ...
    
    def create_command_line(self, executable, problem_files): # -> Bunch:
        ...
    
    def process_soln_file(self, results): # -> None:
        ...
    


