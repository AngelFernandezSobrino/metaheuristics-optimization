"""
This type stub file was generated by pyright.
"""

import enum
from pyomo.opt.results.container import MapContainer

class SolverStatus(str, enum.Enum):
    ok = ...
    warning = ...
    error = ...
    aborted = ...
    unknown = ...
    def __str__(self) -> str:
        ...
    


class TerminationCondition(str, enum.Enum):
    unknown = ...
    maxTimeLimit = ...
    maxIterations = ...
    minFunctionValue = ...
    minStepLength = ...
    globallyOptimal = ...
    locallyOptimal = ...
    feasible = ...
    optimal = ...
    maxEvaluations = ...
    other = ...
    unbounded = ...
    infeasible = ...
    infeasibleOrUnbounded = ...
    invalidProblem = ...
    intermediateNonInteger = ...
    noSolution = ...
    solverFailure = ...
    internalSolverError = ...
    error = ...
    userInterrupt = ...
    resourceInterrupt = ...
    licensingProblems = ...
    def __str__(self) -> str:
        ...
    
    @staticmethod
    def to_solver_status(tc): # -> Literal[SolverStatus.ok, SolverStatus.warning, SolverStatus.error, SolverStatus.aborted, SolverStatus.unknown]:
        """Maps a TerminationCondition to SolverStatus based on enum value

        Parameters
        ----------
        tc: TerminationCondition

        Returns
        -------
        SolverStatus
        """
        ...
    


def check_optimal_termination(results): # -> bool:
    """
    This function returns True if the termination condition for the solver
    is 'optimal', 'locallyOptimal', or 'globallyOptimal', and the status is 'ok'

    Parameters
    ----------
    results : Pyomo results object returned from solver.solve

    Returns
    -------
    `bool`
    """
    ...

def assert_optimal_termination(results): # -> None:
    """
    This function checks if the termination condition for the solver
    is 'optimal', 'locallyOptimal', or 'globallyOptimal', and the status is 'ok'
    and it raises a RuntimeError exception if this is not true.

    Parameters
    ----------
    results : Pyomo results object returned from solver.solve
    """
    ...

class BranchAndBoundStats(MapContainer):
    def __init__(self) -> None:
        ...
    


class BlackBoxStats(MapContainer):
    def __init__(self) -> None:
        ...
    


class SolverStatistics(MapContainer):
    def __init__(self) -> None:
        ...
    


class SolverInformation(MapContainer):
    def __init__(self) -> None:
        ...
    


