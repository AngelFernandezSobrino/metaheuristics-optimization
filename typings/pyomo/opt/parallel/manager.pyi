"""
This type stub file was generated by pyright.
"""

import enum

class ActionStatus(str, enum.Enum):
    done = ...
    error = ...
    queued = ...
    executing = ...
    unknown = ...
    def __str__(self) -> str:
        ...
    


def solve_all_instances(solver_manager, solver, instances, **kwds): # -> None:
    """
    A simple utility to apply a solver to a list of problem instances.
    """
    ...

class ActionManagerError(Exception):
    """
    An exception used when an error occurs within an ActionManager.
    """
    def __init__(self, *args, **kargs) -> None:
        ...
    


class ActionHandle:
    id_counter = ...
    def __init__(self, error=..., explanation=...) -> None:
        """Constructor"""
        ...
    
    def update(self, ah): # -> None:
        """Update the contents of the provided ActionHandle"""
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


FailedActionHandle = ...
class AsynchronousActionManager:
    def __init__(self) -> None:
        """Constructor"""
        ...
    
    def clear(self): # -> None:
        """
        Clear manager state
        """
        ...
    
    def execute(self, *args, **kwds):
        """
        Synchronously execute an action.
        """
        ...
    
    def queue(self, *args, **kwds):
        """
        Queue an action, returning an ActionHandle object.
        """
        ...
    
    def wait_all(self, *args): # -> None:
        """
        Wait for all actions to complete.  The arguments to this method
        are expected to be ActionHandle objects or iterators that return
        ActionHandle objects.  If no arguments are provided, then this
        method will terminate after all queued actions are
        """
        ...
    
    def wait_any(self, *args):
        """
        Wait for any action (or any of the specified actions) to
        complete, and return the corresponding ActionHandle.
        """
        ...
    
    def wait_for(self, ah): # -> None:
        """
        Wait for the specified action to complete.
        """
        ...
    
    def num_queued(self): # -> int:
        """
        Return the number of queued actions.
        """
        ...
    
    def get_status(self, ah):
        """
        Return the status of the ActionHandle.
        """
        ...
    
    def get_results(self, ah): # -> None:
        """
        Return solver results.  If solver results are not available,
        return None.
        """
        ...
    


